/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component } from '@angular/core';
import { GtExpandedRow } from './gt-expanding-row.component';
export class GtDrilldownComponent extends GtExpandedRow {
    constructor() {
        super();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
GtDrilldownComponent.decorators = [
    { type: Component, args: [{
                selector: 'gt-drilldown',
                template: `
      <table class="table">
          <tr *ngFor="let row of data" (click)="$rowClick(row, $event)">
              <!--<td *ngFor="let column of gtSettings" [style.width]="columnWidth[column.objectKey]">{{column.objectKey}}</td>-->
              <td *ngFor="let column of row | gtRender:gtSettings:gtFields:null:null:gtOptions.highlightSearch:gtInfo.searchTerms;"
                  ngClass="{{column.objectKey +'-column' | dashCase}} {{gtFields | gtProperty:column.objectKey:'classNames'}} {{(gtFields | gtProperty:column.objectKey:'inlineEdit') ? 'gt-inline-edit':''}} {{column.edited ? 'gt-edited':''}} {{ gtFields | gtColumnClass:row:column }}" [style.width]="columnWidth[column.objectKey]" [style.max-width]="columnWidth[column.objectKey]">
                        <span class="gt-row-label"
                              *ngIf="gtOptions.stack">{{(gtFields | gtProperty:column.objectKey:'stackedHeading') ? (gtFields | gtProperty:column.objectKey:'stackedHeading') : (gtFields | gtProperty:column.objectKey:'name')}}</span>
                  <gt-custom-component-factory *ngIf="column.columnComponent" class="gt-row-content"
                                               [type]="column.columnComponent.type"
                                               [injector]="column.columnComponent.injector" [row]="row"
                                               [column]="column" (redrawEvent)="$redraw($event)"
                                               (click)="column.click ? column.click(row,column,$event):'';"></gt-custom-component-factory>
                  <span *ngIf="!column.columnComponent"
                        class="gt-row-content" [innerHTML]="column.renderValue"
                        (click)="column.click ? column.click(row,column,$event):''"></span>
              </td>

          </tr>
      </table>
  `,
                styles: []
            },] },
];
/** @nocollapse */
GtDrilldownComponent.ctorParameters = () => [];
function GtDrilldownComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtDrilldownComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtDrilldownComponent.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtZHJpbGxkb3duLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLWdlbmVyaWMtdGFibGUvY29yZS8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZ3QtZHJpbGxkb3duLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUEyQjdELE1BQU0sMkJBQTRCLFNBQVEsYUFBa0I7SUFDM0Q7UUFDQyxLQUFLLEVBQUUsQ0FBQztLQUNSOzs7O0lBRUQsUUFBUSxNQUFLOzs7WUE5QmIsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxjQUFjO2dCQUN4QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JSO2dCQUNGLE1BQU0sRUFBRSxFQUFFO2FBQ1YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3RFeHBhbmRlZFJvdyB9IGZyb20gJy4vZ3QtZXhwYW5kaW5nLXJvdy5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdndC1kcmlsbGRvd24nLFxuXHR0ZW1wbGF0ZTogYFxuICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGVcIj5cbiAgICAgICAgICA8dHIgKm5nRm9yPVwibGV0IHJvdyBvZiBkYXRhXCIgKGNsaWNrKT1cIiRyb3dDbGljayhyb3csICRldmVudClcIj5cbiAgICAgICAgICAgICAgPCEtLTx0ZCAqbmdGb3I9XCJsZXQgY29sdW1uIG9mIGd0U2V0dGluZ3NcIiBbc3R5bGUud2lkdGhdPVwiY29sdW1uV2lkdGhbY29sdW1uLm9iamVjdEtleV1cIj57e2NvbHVtbi5vYmplY3RLZXl9fTwvdGQ+LS0+XG4gICAgICAgICAgICAgIDx0ZCAqbmdGb3I9XCJsZXQgY29sdW1uIG9mIHJvdyB8IGd0UmVuZGVyOmd0U2V0dGluZ3M6Z3RGaWVsZHM6bnVsbDpudWxsOmd0T3B0aW9ucy5oaWdobGlnaHRTZWFyY2g6Z3RJbmZvLnNlYXJjaFRlcm1zO1wiXG4gICAgICAgICAgICAgICAgICBuZ0NsYXNzPVwie3tjb2x1bW4ub2JqZWN0S2V5ICsnLWNvbHVtbicgfCBkYXNoQ2FzZX19IHt7Z3RGaWVsZHMgfCBndFByb3BlcnR5OmNvbHVtbi5vYmplY3RLZXk6J2NsYXNzTmFtZXMnfX0ge3soZ3RGaWVsZHMgfCBndFByb3BlcnR5OmNvbHVtbi5vYmplY3RLZXk6J2lubGluZUVkaXQnKSA/ICdndC1pbmxpbmUtZWRpdCc6Jyd9fSB7e2NvbHVtbi5lZGl0ZWQgPyAnZ3QtZWRpdGVkJzonJ319IHt7IGd0RmllbGRzIHwgZ3RDb2x1bW5DbGFzczpyb3c6Y29sdW1uIH19XCIgW3N0eWxlLndpZHRoXT1cImNvbHVtbldpZHRoW2NvbHVtbi5vYmplY3RLZXldXCIgW3N0eWxlLm1heC13aWR0aF09XCJjb2x1bW5XaWR0aFtjb2x1bW4ub2JqZWN0S2V5XVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJndC1yb3ctbGFiZWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJndE9wdGlvbnMuc3RhY2tcIj57eyhndEZpZWxkcyB8IGd0UHJvcGVydHk6Y29sdW1uLm9iamVjdEtleTonc3RhY2tlZEhlYWRpbmcnKSA/IChndEZpZWxkcyB8IGd0UHJvcGVydHk6Y29sdW1uLm9iamVjdEtleTonc3RhY2tlZEhlYWRpbmcnKSA6IChndEZpZWxkcyB8IGd0UHJvcGVydHk6Y29sdW1uLm9iamVjdEtleTonbmFtZScpfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8Z3QtY3VzdG9tLWNvbXBvbmVudC1mYWN0b3J5ICpuZ0lmPVwiY29sdW1uLmNvbHVtbkNvbXBvbmVudFwiIGNsYXNzPVwiZ3Qtcm93LWNvbnRlbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdHlwZV09XCJjb2x1bW4uY29sdW1uQ29tcG9uZW50LnR5cGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbaW5qZWN0b3JdPVwiY29sdW1uLmNvbHVtbkNvbXBvbmVudC5pbmplY3RvclwiIFtyb3ddPVwicm93XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2NvbHVtbl09XCJjb2x1bW5cIiAocmVkcmF3RXZlbnQpPVwiJHJlZHJhdygkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cImNvbHVtbi5jbGljayA/IGNvbHVtbi5jbGljayhyb3csY29sdW1uLCRldmVudCk6Jyc7XCI+PC9ndC1jdXN0b20tY29tcG9uZW50LWZhY3Rvcnk+XG4gICAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cIiFjb2x1bW4uY29sdW1uQ29tcG9uZW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZ3Qtcm93LWNvbnRlbnRcIiBbaW5uZXJIVE1MXT1cImNvbHVtbi5yZW5kZXJWYWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwiY29sdW1uLmNsaWNrID8gY29sdW1uLmNsaWNrKHJvdyxjb2x1bW4sJGV2ZW50KTonJ1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgPC90ZD5cblxuICAgICAgICAgIDwvdHI+XG4gICAgICA8L3RhYmxlPlxuICBgLFxuXHRzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIEd0RHJpbGxkb3duQ29tcG9uZW50IGV4dGVuZHMgR3RFeHBhbmRlZFJvdzxhbnk+IGltcGxlbWVudHMgT25Jbml0IHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdG5nT25Jbml0KCkge31cbn1cbiJdfQ==