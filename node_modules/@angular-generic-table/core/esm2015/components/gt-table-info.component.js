/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ChangeDetectorRef, Input } from '@angular/core';
import { GenericTableComponent } from './generic-table.component';
export class GtTableInfoComponent {
    /**
     * @param {?} _changeDetectionRef
     */
    constructor(_changeDetectionRef) {
        this._changeDetectionRef = _changeDetectionRef;
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this._changeDetectionRef.detectChanges();
    }
}
GtTableInfoComponent.decorators = [
    { type: Component, args: [{
                selector: 'gt-table-info',
                template: `<span *ngIf="genericTable.gtInfo">{{(customText? customText:genericTable.gtTexts) | gtTableInfo:
		genericTable.gtInfo:
		genericTable.gtInfo.recordsAfterSearch:
		genericTable.gtInfo.recordFrom:
		genericTable.gtInfo.recordTo:
		genericTable.gtInfo.recordsAll:
		genericTable.gtTexts.loading:
		genericTable.gtTexts.tableInfoAfterSearch}}</span>`
            },] },
];
/** @nocollapse */
GtTableInfoComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];
GtTableInfoComponent.propDecorators = {
    "genericTable": [{ type: Input },],
    "customText": [{ type: Input },],
};
function GtTableInfoComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtTableInfoComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtTableInfoComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GtTableInfoComponent.propDecorators;
    /** @type {?} */
    GtTableInfoComponent.prototype.genericTable;
    /** @type {?} */
    GtTableInfoComponent.prototype.customText;
    /** @type {?} */
    GtTableInfoComponent.prototype._changeDetectionRef;
}
import { Pipe } from '@angular/core';
export class TableInfoPipe {
    /**
     * @param {?} texts
     * @param {?} keys
     * @param {?} recordsAfterSearch
     * @param {?} recordFrom
     * @param {?} recordTo
     * @param {?} recordsAll
     * @param {?} loading
     * @param {?} tableInfoAfterSearch
     * @return {?}
     */
    transform(texts, keys, recordsAfterSearch, recordFrom, recordTo, recordsAll, loading, tableInfoAfterSearch) {
        let /** @type {?} */ text = typeof texts === 'object' ? texts.tableInfo : '';
        if (keys.recordsAfterSearch !== keys.recordsAll) {
            text = typeof texts === 'object' ? texts.tableInfoAfterSearch : '';
        }
        for (const /** @type {?} */ key in keys) {
            if (keys.hasOwnProperty(key)) {
                const /** @type {?} */ searchString = new RegExp('#' + key, 'g');
                text = text.replace(searchString, keys[key]);
            }
        }
        return text;
    }
}
TableInfoPipe.decorators = [
    { type: Pipe, args: [{
                name: 'gtTableInfo'
            },] },
];
function TableInfoPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    TableInfoPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    TableInfoPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtdGFibGUtaW5mby5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1nZW5lcmljLXRhYmxlL2NvcmUvIiwic291cmNlcyI6WyJjb21wb25lbnRzL2d0LXRhYmxlLWluZm8uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULGlCQUFpQixFQUVqQixLQUFLLEVBQ0wsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFhbEUsTUFBTTs7OztJQUlMLFlBQW9CLG1CQUFzQztRQUF0Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQW1CO0tBQUk7Ozs7SUFFOUQsa0JBQWtCO1FBQ2pCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztLQUN6Qzs7O1lBbkJELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsZUFBZTtnQkFDekIsUUFBUSxFQUFFOzs7Ozs7O3FEQU8wQzthQUNwRDs7OztZQWhCQSxpQkFBaUI7Ozs2QkFrQmhCLEtBQUs7MkJBQ0wsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVFQLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBT3BELE1BQU07Ozs7Ozs7Ozs7OztJQUNMLFNBQVMsQ0FDUixLQUF1QixFQUN2QixJQUFtQixFQUNuQixrQkFBMEIsRUFDMUIsVUFBa0IsRUFDbEIsUUFBZ0IsRUFDaEIsVUFBa0IsRUFDbEIsT0FBZSxFQUNmLG9CQUE0QjtRQUU1QixxQkFBSSxJQUFJLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDNUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixLQUFLLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2pELElBQUksR0FBRyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ25FO1FBQ0QsR0FBRyxDQUFDLENBQUMsdUJBQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDeEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLHVCQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDN0M7U0FDRDtRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7S0FDWjs7O1lBekJELElBQUksU0FBQztnQkFDTCxJQUFJLEVBQUUsYUFBYTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0Q2hhbmdlRGV0ZWN0b3JSZWYsXG5cdEFmdGVyVmlld0NoZWNrZWQsXG5cdElucHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR2VuZXJpY1RhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi9nZW5lcmljLXRhYmxlLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2d0LXRhYmxlLWluZm8nLFxuXHR0ZW1wbGF0ZTogYDxzcGFuICpuZ0lmPVwiZ2VuZXJpY1RhYmxlLmd0SW5mb1wiPnt7KGN1c3RvbVRleHQ/IGN1c3RvbVRleHQ6Z2VuZXJpY1RhYmxlLmd0VGV4dHMpIHwgZ3RUYWJsZUluZm86XG5cdFx0Z2VuZXJpY1RhYmxlLmd0SW5mbzpcblx0XHRnZW5lcmljVGFibGUuZ3RJbmZvLnJlY29yZHNBZnRlclNlYXJjaDpcblx0XHRnZW5lcmljVGFibGUuZ3RJbmZvLnJlY29yZEZyb206XG5cdFx0Z2VuZXJpY1RhYmxlLmd0SW5mby5yZWNvcmRUbzpcblx0XHRnZW5lcmljVGFibGUuZ3RJbmZvLnJlY29yZHNBbGw6XG5cdFx0Z2VuZXJpY1RhYmxlLmd0VGV4dHMubG9hZGluZzpcblx0XHRnZW5lcmljVGFibGUuZ3RUZXh0cy50YWJsZUluZm9BZnRlclNlYXJjaH19PC9zcGFuPmBcbn0pXG5leHBvcnQgY2xhc3MgR3RUYWJsZUluZm9Db21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkIHtcblx0QElucHV0KCkgZ2VuZXJpY1RhYmxlOiBHZW5lcmljVGFibGVDb21wb25lbnQ8YW55LCBhbnk+O1xuXHRASW5wdXQoKSBjdXN0b21UZXh0OiBzdHJpbmc7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSBfY2hhbmdlRGV0ZWN0aW9uUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuXHRuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XG5cdFx0dGhpcy5fY2hhbmdlRGV0ZWN0aW9uUmVmLmRldGVjdENoYW5nZXMoKTtcblx0fVxufVxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3RJbmZvcm1hdGlvbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvZ3QtaW5mb3JtYXRpb24nO1xuaW1wb3J0IHsgR3RUZXh0cyB9IGZyb20gJy4uL2ludGVyZmFjZXMvZ3QtdGV4dHMnO1xuXG5AUGlwZSh7XG5cdG5hbWU6ICdndFRhYmxlSW5mbydcbn0pXG5leHBvcnQgY2xhc3MgVGFibGVJbmZvUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXHR0cmFuc2Zvcm0oXG5cdFx0dGV4dHM6IEd0VGV4dHMgfCBzdHJpbmcsXG5cdFx0a2V5czogR3RJbmZvcm1hdGlvbixcblx0XHRyZWNvcmRzQWZ0ZXJTZWFyY2g6IG51bWJlcixcblx0XHRyZWNvcmRGcm9tOiBudW1iZXIsXG5cdFx0cmVjb3JkVG86IG51bWJlcixcblx0XHRyZWNvcmRzQWxsOiBudW1iZXIsXG5cdFx0bG9hZGluZzogc3RyaW5nLFxuXHRcdHRhYmxlSW5mb0FmdGVyU2VhcmNoOiBzdHJpbmdcblx0KTogc3RyaW5nIHtcblx0XHRsZXQgdGV4dCA9IHR5cGVvZiB0ZXh0cyA9PT0gJ29iamVjdCcgPyB0ZXh0cy50YWJsZUluZm8gOiAnJztcblx0XHRpZiAoa2V5cy5yZWNvcmRzQWZ0ZXJTZWFyY2ggIT09IGtleXMucmVjb3Jkc0FsbCkge1xuXHRcdFx0dGV4dCA9IHR5cGVvZiB0ZXh0cyA9PT0gJ29iamVjdCcgPyB0ZXh0cy50YWJsZUluZm9BZnRlclNlYXJjaCA6ICcnO1xuXHRcdH1cblx0XHRmb3IgKGNvbnN0IGtleSBpbiBrZXlzKSB7XG5cdFx0XHRpZiAoa2V5cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRcdGNvbnN0IHNlYXJjaFN0cmluZyA9IG5ldyBSZWdFeHAoJyMnICsga2V5LCAnZycpO1xuXHRcdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKHNlYXJjaFN0cmluZywga2V5c1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRleHQ7XG5cdH1cbn1cbiJdfQ==