/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
export class GtCheckboxComponent {
    constructor() {
        this.class = 'd-flex justify-content-end';
        this.changed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get initialValue() {
        return this._initialValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set initialValue(value) {
        this._initialValue = value;
    }
    /**
     * @return {?}
     */
    get checked() {
        return this._checked;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set checked(value) {
        this._checked = value;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} checked
     * @return {?}
     */
    toggle(checked) {
        this.changed.emit(this.checked);
    }
}
GtCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'gt-checkbox',
                template: `
    <label class="custom-control custom-checkbox p-0" (click)="$event.stopPropagation()">
      <input #checkbox type="checkbox" class="custom-control-input" [(checked)]="checked" (change)="toggle($event);">
      <span class="custom-control-label"></span>
    </label>
  `,
                styles: []
            },] },
];
/** @nocollapse */
GtCheckboxComponent.ctorParameters = () => [];
GtCheckboxComponent.propDecorators = {
    "class": [{ type: HostBinding, args: ['class',] },],
    "initialValue": [{ type: Input },],
    "checked": [{ type: Input },],
    "changed": [{ type: Output },],
};
function GtCheckboxComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtCheckboxComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtCheckboxComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GtCheckboxComponent.propDecorators;
    /** @type {?} */
    GtCheckboxComponent.prototype.class;
    /** @type {?} */
    GtCheckboxComponent.prototype._checked;
    /** @type {?} */
    GtCheckboxComponent.prototype._initialValue;
    /** @type {?} */
    GtCheckboxComponent.prototype.changed;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFuZ3VsYXItZ2VuZXJpYy10YWJsZS9jb3JlLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9ndC1jaGVja2JveC9ndC1jaGVja2JveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxLQUFLLEVBRUwsTUFBTSxFQUNOLE1BQU0sZUFBZSxDQUFDO0FBWXZCLE1BQU07SUF3Qkw7cUJBbkI4Qiw0QkFBNEI7dUJBaUJmLElBQUksWUFBWSxFQUFFO0tBRTdDOzs7O0lBdkJoQixJQUFJLFlBQVk7UUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztLQUMxQjs7Ozs7UUFLRyxZQUFZLENBQUMsS0FBYztRQUM5QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQzs7Ozs7SUFFNUIsSUFBSSxPQUFPO1FBQ1YsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDckI7Ozs7O1FBR0csT0FBTyxDQUFDLEtBQWM7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Ozs7O0lBU3ZCLFFBQVEsTUFBSzs7Ozs7SUFFYixNQUFNLENBQUMsT0FBZ0I7UUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2hDOzs7WUF4Q0QsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixRQUFRLEVBQUU7Ozs7O0dBS1I7Z0JBQ0YsTUFBTSxFQUFFLEVBQUU7YUFDVjs7Ozs7c0JBTUMsV0FBVyxTQUFDLE9BQU87NkJBRW5CLEtBQUs7d0JBUUwsS0FBSzt3QkFPTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRFdmVudEVtaXR0ZXIsXG5cdEhvc3RCaW5kaW5nLFxuXHRJbnB1dCxcblx0T25Jbml0LFxuXHRPdXRwdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2d0LWNoZWNrYm94Jyxcblx0dGVtcGxhdGU6IGBcbiAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbCBjdXN0b20tY2hlY2tib3ggcC0wXCIgKGNsaWNrKT1cIiRldmVudC5zdG9wUHJvcGFnYXRpb24oKVwiPlxuICAgICAgPGlucHV0ICNjaGVja2JveCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0XCIgWyhjaGVja2VkKV09XCJjaGVja2VkXCIgKGNoYW5nZSk9XCJ0b2dnbGUoJGV2ZW50KTtcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWxcIj48L3NwYW4+XG4gICAgPC9sYWJlbD5cbiAgYCxcblx0c3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBHdENoZWNrYm94Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblx0Z2V0IGluaXRpYWxWYWx1ZSgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5faW5pdGlhbFZhbHVlO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKCdjbGFzcycpIGNsYXNzID0gJ2QtZmxleCBqdXN0aWZ5LWNvbnRlbnQtZW5kJztcblxuXHRASW5wdXQoKVxuXHRzZXQgaW5pdGlhbFZhbHVlKHZhbHVlOiBib29sZWFuKSB7XG5cdFx0dGhpcy5faW5pdGlhbFZhbHVlID0gdmFsdWU7XG5cdH1cblx0Z2V0IGNoZWNrZWQoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuX2NoZWNrZWQ7XG5cdH1cblxuXHRASW5wdXQoKVxuXHRzZXQgY2hlY2tlZCh2YWx1ZTogYm9vbGVhbikge1xuXHRcdHRoaXMuX2NoZWNrZWQgPSB2YWx1ZTtcblx0fVxuXG5cdHByaXZhdGUgX2NoZWNrZWQ6IGJvb2xlYW47XG5cdHByaXZhdGUgX2luaXRpYWxWYWx1ZTogYm9vbGVhbjtcblx0QE91dHB1dCgpIGNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuXHRjb25zdHJ1Y3RvcigpIHt9XG5cblx0bmdPbkluaXQoKSB7fVxuXG5cdHRvZ2dsZShjaGVja2VkOiBib29sZWFuKSB7XG5cdFx0dGhpcy5jaGFuZ2VkLmVtaXQodGhpcy5jaGVja2VkKTtcblx0fVxufVxuIl19