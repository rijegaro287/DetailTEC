/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
export class GtFilterPipe {
    /**
     * @param {?} allRows
     * @param {?} filterBy
     * @param {?} gtInfo
     * @param {?} refreshFilter
     * @param {?} refreshData
     * @return {?}
     */
    transform(allRows, filterBy, gtInfo, refreshFilter, refreshData) {
        // console.log(allRows,filterBy);
        gtInfo.recordsAll = allRows.length;
        if (!Array.isArray(allRows) || !filterBy) {
            // gtInfo.filtered = false;
            const /** @type {?} */ length = allRows === null ? 0 : allRows.length;
            gtInfo.recordsAfterFilter = length;
            return allRows;
        }
        const /** @type {?} */ output = [];
        for (let /** @type {?} */ i = 0; i < allRows.length; i++) {
            const /** @type {?} */ rowObject = allRows[i];
            let /** @type {?} */ match = true;
            for (const /** @type {?} */ property in filterBy) {
                if (filterBy.hasOwnProperty(property)) {
                    // console.log(property);
                    // console.log(filter[property].indexOf(obj[property]));
                    if (filterBy[property].indexOf(rowObject[property]) === -1) {
                        match = false;
                    }
                }
            }
            if (match) {
                output.push(rowObject);
            }
        }
        gtInfo.recordsAfterFilter = output.length; // .emit(output.length);
        return output;
    }
}
GtFilterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'gtFilter'
            },] },
];
function GtFilterPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtFilterPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtFilterPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtZmlsdGVyLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1nZW5lcmljLXRhYmxlL2NvcmUvIiwic291cmNlcyI6WyJwaXBlcy9ndC1maWx0ZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBdUMsTUFBTSxlQUFlLENBQUM7QUFNMUUsTUFBTTs7Ozs7Ozs7O0lBR0wsU0FBUyxDQUNSLE9BQWMsRUFDZCxRQUFnQixFQUNoQixNQUFxQixFQUNyQixhQUFzQixFQUN0QixXQUFtQjs7UUFHbkIsTUFBTSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ25DLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7O1lBRzFDLHVCQUFNLE1BQU0sR0FBRyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDckQsTUFBTSxDQUFDLGtCQUFrQixHQUFHLE1BQU0sQ0FBQztZQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDO1NBQ2Y7UUFFRCx1QkFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN6Qyx1QkFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLHFCQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7WUFFakIsR0FBRyxDQUFDLENBQUMsdUJBQU0sUUFBUSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7b0JBR3ZDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUM1RCxLQUFLLEdBQUcsS0FBSyxDQUFDO3FCQUNkO2lCQUNEO2FBQ0Q7WUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDdkI7U0FDRDtRQUNELE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7S0FDZDs7O1lBM0NELElBQUksU0FBQztnQkFDTCxJQUFJLEVBQUUsVUFBVTthQUNoQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHdEluZm9ybWF0aW9uIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9ndC1pbmZvcm1hdGlvbic7XG5cbkBQaXBlKHtcblx0bmFtZTogJ2d0RmlsdGVyJ1xufSlcbmV4cG9ydCBjbGFzcyBHdEZpbHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblx0Ly8gQE91dHB1dCgpIGZpbHRlckluZm8gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cblx0dHJhbnNmb3JtKFxuXHRcdGFsbFJvd3M6IGFueVtdLFxuXHRcdGZpbHRlckJ5OiBPYmplY3QsXG5cdFx0Z3RJbmZvOiBHdEluZm9ybWF0aW9uLFxuXHRcdHJlZnJlc2hGaWx0ZXI6IGJvb2xlYW4sXG5cdFx0cmVmcmVzaERhdGE6IG51bWJlclxuXHQpOiBhbnlbXSB7XG5cdFx0Ly8gY29uc29sZS5sb2coYWxsUm93cyxmaWx0ZXJCeSk7XG5cdFx0Z3RJbmZvLnJlY29yZHNBbGwgPSBhbGxSb3dzLmxlbmd0aDtcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkoYWxsUm93cykgfHwgIWZpbHRlckJ5KSB7XG5cdFx0XHQvLyBndEluZm8uZmlsdGVyZWQgPSBmYWxzZTtcblxuXHRcdFx0Y29uc3QgbGVuZ3RoID0gYWxsUm93cyA9PT0gbnVsbCA/IDAgOiBhbGxSb3dzLmxlbmd0aDtcblx0XHRcdGd0SW5mby5yZWNvcmRzQWZ0ZXJGaWx0ZXIgPSBsZW5ndGg7XG5cdFx0XHRyZXR1cm4gYWxsUm93cztcblx0XHR9XG5cblx0XHRjb25zdCBvdXRwdXQgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFsbFJvd3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IHJvd09iamVjdCA9IGFsbFJvd3NbaV07XG5cdFx0XHRsZXQgbWF0Y2ggPSB0cnVlO1xuXG5cdFx0XHRmb3IgKGNvbnN0IHByb3BlcnR5IGluIGZpbHRlckJ5KSB7XG5cdFx0XHRcdGlmIChmaWx0ZXJCeS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhwcm9wZXJ0eSk7XG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coZmlsdGVyW3Byb3BlcnR5XS5pbmRleE9mKG9ialtwcm9wZXJ0eV0pKTtcblx0XHRcdFx0XHRpZiAoZmlsdGVyQnlbcHJvcGVydHldLmluZGV4T2Yocm93T2JqZWN0W3Byb3BlcnR5XSkgPT09IC0xKSB7XG5cdFx0XHRcdFx0XHRtYXRjaCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKG1hdGNoKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHJvd09iamVjdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGd0SW5mby5yZWNvcmRzQWZ0ZXJGaWx0ZXIgPSBvdXRwdXQubGVuZ3RoOyAvLyAuZW1pdChvdXRwdXQubGVuZ3RoKTtcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG59XG4iXX0=