/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, EventEmitter, Input, Output, Type } from '@angular/core';
// unsupported: template constraints.
/**
 * @template R
 */
var 
// unsupported: template constraints.
/**
 * @template R
 */
GtExpandedRow = /** @class */ (function () {
    function GtExpandedRow() {
        this.redrawEvent = new EventEmitter();
        this.toggleRowEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    GtExpandedRow.prototype.$hide = /**
     * @return {?}
     */
    function () {
        this.toggleRowEvent.emit(this.row);
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    GtExpandedRow.prototype.$redraw = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        this.redrawEvent.emit(this.row);
    };
    /**
     * @param {?} row
     * @param {?} $event
     * @return {?}
     */
    GtExpandedRow.prototype.$rowClick = /**
     * @param {?} row
     * @param {?} $event
     * @return {?}
     */
    function (row, $event) {
        this.gtEvent.emit({
            name: 'gt-row-clicked',
            value: { row: row, event: $event }
        });
    };
    return GtExpandedRow;
}());
// unsupported: template constraints.
/**
 * @template R
 */
export { GtExpandedRow };
function GtExpandedRow_tsickle_Closure_declarations() {
    /** @type {?} */
    GtExpandedRow.prototype.row;
    /** @type {?} */
    GtExpandedRow.prototype.columnWidth;
    /** @type {?} */
    GtExpandedRow.prototype.gtSettings;
    /** @type {?} */
    GtExpandedRow.prototype.gtFields;
    /** @type {?} */
    GtExpandedRow.prototype.gtOptions;
    /** @type {?} */
    GtExpandedRow.prototype.gtInfo;
    /** @type {?} */
    GtExpandedRow.prototype.data;
    /** @type {?} */
    GtExpandedRow.prototype.redrawEvent;
    /** @type {?} */
    GtExpandedRow.prototype.gtEvent;
    /** @type {?} */
    GtExpandedRow.prototype.toggleRowEvent;
}
// unsupported: template constraints.
// unsupported: template constraints.
/**
 * @template R, C
 */
var GtExpandingRowComponent = /** @class */ (function () {
    function GtExpandingRowComponent() {
        this.redrawEvent = new EventEmitter();
        this.toggleRowEvent = new EventEmitter();
    }
    /**
     * @param {?} instance
     * @return {?}
     */
    GtExpandingRowComponent.prototype.newInstance = /**
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        instance.row = this.row;
        instance.columnWidth = this.columnWidth;
        instance.gtSettings = this.gtSettings;
        instance.gtFields = this.gtFields;
        instance.gtOptions = this.gtOptions;
        instance.gtInfo = this.gtInfo;
        instance.data =
            typeof this.data === 'function' ? this.data(this.row) : this.data;
        instance.redrawEvent.subscribe(this.redrawEvent);
        instance.toggleRowEvent.subscribe(this.toggleRowEvent);
        instance.gtEvent = this.gtEvent;
    };
    GtExpandingRowComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gt-expanding-row',
                    template: "\n        <div gtComponentAnchor\n             [ctor]=\"type\" (instance)=\"newInstance($event)\"></div>"
                },] },
    ];
    /** @nocollapse */
    GtExpandingRowComponent.propDecorators = {
        "type": [{ type: Input },],
        "row": [{ type: Input },],
        "columnWidth": [{ type: Input },],
        "gtSettings": [{ type: Input },],
        "gtFields": [{ type: Input },],
        "gtOptions": [{ type: Input },],
        "gtInfo": [{ type: Input },],
        "data": [{ type: Input },],
        "redrawEvent": [{ type: Output },],
        "toggleRowEvent": [{ type: Output },],
        "gtEvent": [{ type: Input },],
    };
    return GtExpandingRowComponent;
}());
export { GtExpandingRowComponent };
function GtExpandingRowComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtExpandingRowComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtExpandingRowComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GtExpandingRowComponent.propDecorators;
    /** @type {?} */
    GtExpandingRowComponent.prototype.type;
    /** @type {?} */
    GtExpandingRowComponent.prototype.row;
    /** @type {?} */
    GtExpandingRowComponent.prototype.columnWidth;
    /** @type {?} */
    GtExpandingRowComponent.prototype.gtSettings;
    /** @type {?} */
    GtExpandingRowComponent.prototype.gtFields;
    /** @type {?} */
    GtExpandingRowComponent.prototype.gtOptions;
    /** @type {?} */
    GtExpandingRowComponent.prototype.gtInfo;
    /** @type {?} */
    GtExpandingRowComponent.prototype.data;
    /** @type {?} */
    GtExpandingRowComponent.prototype.redrawEvent;
    /** @type {?} */
    GtExpandingRowComponent.prototype.toggleRowEvent;
    /** @type {?} */
    GtExpandingRowComponent.prototype.gtEvent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtZXhwYW5kaW5nLXJvdy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1nZW5lcmljLXRhYmxlL2NvcmUvIiwic291cmNlcyI6WyJjb21wb25lbnRzL2d0LWV4cGFuZGluZy1yb3cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFHN0U7Ozs7O0FBQUE7OzJCQVFlLElBQUksWUFBWSxFQUFLOzhCQUVsQixJQUFJLFlBQVksRUFBSzs7Ozs7SUFFL0IsNkJBQUs7Ozs7UUFDWCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Ozs7OztJQUc3QiwrQkFBTzs7OztjQUFDLE1BQVk7UUFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7Ozs7O0lBRTFCLGlDQUFTOzs7OztjQUFDLEdBQVUsRUFBRSxNQUFrQjtRQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztZQUNqQixJQUFJLEVBQUUsZ0JBQWdCO1lBQ3RCLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTtTQUNsQyxDQUFDLENBQUM7O3dCQTFCTDtJQTRCQyxDQUFBOzs7OztBQXpCRCx5QkF5QkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFxQndCLElBQUksWUFBWSxFQUFLOzhCQUNsQixJQUFJLFlBQVksRUFBSzs7Ozs7O0lBR2hELDZDQUFXOzs7O0lBQVgsVUFBWSxRQUFXO1FBQ3RCLFFBQVEsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUN4QixRQUFRLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDeEMsUUFBUSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3RDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNsQyxRQUFRLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDcEMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzlCLFFBQVEsQ0FBQyxJQUFJO1lBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDbkUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN2RCxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7S0FDaEM7O2dCQW5DRCxTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsUUFBUSxFQUFFLDBHQUV3RDtpQkFDbEU7Ozs7eUJBS0MsS0FBSzt3QkFDTCxLQUFLO2dDQUNMLEtBQUs7K0JBQ0wsS0FBSzs2QkFDTCxLQUFLOzhCQUNMLEtBQUs7MkJBQ0wsS0FBSzt5QkFDTCxLQUFLO2dDQUVMLE1BQU07bUNBQ04sTUFBTTs0QkFDTixLQUFLOztrQ0FuRFA7O1NBb0NhLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHdFJvdywgR3RDb25maWdGaWVsZCwgR3RDb25maWdTZXR0aW5nLCBHdEV2ZW50IH0gZnJvbSAnLi4nO1xuXG5leHBvcnQgY2xhc3MgR3RFeHBhbmRlZFJvdzxSIGV4dGVuZHMgR3RSb3c+IHtcblx0cm93OiBSO1xuXHRjb2x1bW5XaWR0aDogT2JqZWN0O1xuXHRndFNldHRpbmdzOiBBcnJheTxHdENvbmZpZ1NldHRpbmc+O1xuXHRndEZpZWxkczogQXJyYXk8R3RDb25maWdGaWVsZDxSLCBhbnk+Pjtcblx0Z3RPcHRpb25zOiBhbnk7XG5cdGd0SW5mbzogYW55O1xuXHRkYXRhOiBhbnk7XG5cdHJlZHJhd0V2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxSPigpO1xuXHRndEV2ZW50OiBFdmVudEVtaXR0ZXI8R3RFdmVudD47XG5cdHRvZ2dsZVJvd0V2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxSPigpO1xuXG5cdHB1YmxpYyAkaGlkZSgpOiB2b2lkIHtcblx0XHR0aGlzLnRvZ2dsZVJvd0V2ZW50LmVtaXQodGhpcy5yb3cpO1xuXHR9XG5cblx0cHVibGljICRyZWRyYXcoJGV2ZW50PzogYW55KTogdm9pZCB7XG5cdFx0dGhpcy5yZWRyYXdFdmVudC5lbWl0KHRoaXMucm93KTtcblx0fVxuXHRwdWJsaWMgJHJvd0NsaWNrKHJvdzogR3RSb3csICRldmVudDogTW91c2VFdmVudCkge1xuXHRcdHRoaXMuZ3RFdmVudC5lbWl0KHtcblx0XHRcdG5hbWU6ICdndC1yb3ctY2xpY2tlZCcsXG5cdFx0XHR2YWx1ZTogeyByb3c6IHJvdywgZXZlbnQ6ICRldmVudCB9XG5cdFx0fSk7XG5cdH1cbn1cblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnZ3QtZXhwYW5kaW5nLXJvdycsXG5cdHRlbXBsYXRlOiBgXG4gICAgICAgIDxkaXYgZ3RDb21wb25lbnRBbmNob3JcbiAgICAgICAgICAgICBbY3Rvcl09XCJ0eXBlXCIgKGluc3RhbmNlKT1cIm5ld0luc3RhbmNlKCRldmVudClcIj48L2Rpdj5gXG59KVxuZXhwb3J0IGNsYXNzIEd0RXhwYW5kaW5nUm93Q29tcG9uZW50PFxuXHRSIGV4dGVuZHMgR3RSb3csXG5cdEMgZXh0ZW5kcyBHdEV4cGFuZGVkUm93PFI+XG4+IHtcblx0QElucHV0KCkgdHlwZTogVHlwZTxDPjtcblx0QElucHV0KCkgcm93OiBSO1xuXHRASW5wdXQoKSBjb2x1bW5XaWR0aDogT2JqZWN0O1xuXHRASW5wdXQoKSBndFNldHRpbmdzOiBBcnJheTxHdENvbmZpZ1NldHRpbmc+O1xuXHRASW5wdXQoKSBndEZpZWxkczogQXJyYXk8R3RDb25maWdGaWVsZDxSLCBhbnk+Pjtcblx0QElucHV0KCkgZ3RPcHRpb25zOiBhbnk7XG5cdEBJbnB1dCgpIGd0SW5mbzogYW55O1xuXHRASW5wdXQoKSBkYXRhOiBhbnk7XG5cblx0QE91dHB1dCgpIHJlZHJhd0V2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxSPigpO1xuXHRAT3V0cHV0KCkgdG9nZ2xlUm93RXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyPFI+KCk7XG5cdEBJbnB1dCgpIGd0RXZlbnQ6IGFueTtcblxuXHRuZXdJbnN0YW5jZShpbnN0YW5jZTogQyk6IHZvaWQge1xuXHRcdGluc3RhbmNlLnJvdyA9IHRoaXMucm93O1xuXHRcdGluc3RhbmNlLmNvbHVtbldpZHRoID0gdGhpcy5jb2x1bW5XaWR0aDtcblx0XHRpbnN0YW5jZS5ndFNldHRpbmdzID0gdGhpcy5ndFNldHRpbmdzO1xuXHRcdGluc3RhbmNlLmd0RmllbGRzID0gdGhpcy5ndEZpZWxkcztcblx0XHRpbnN0YW5jZS5ndE9wdGlvbnMgPSB0aGlzLmd0T3B0aW9ucztcblx0XHRpbnN0YW5jZS5ndEluZm8gPSB0aGlzLmd0SW5mbztcblx0XHRpbnN0YW5jZS5kYXRhID1cblx0XHRcdHR5cGVvZiB0aGlzLmRhdGEgPT09ICdmdW5jdGlvbicgPyB0aGlzLmRhdGEodGhpcy5yb3cpIDogdGhpcy5kYXRhO1xuXHRcdGluc3RhbmNlLnJlZHJhd0V2ZW50LnN1YnNjcmliZSh0aGlzLnJlZHJhd0V2ZW50KTtcblx0XHRpbnN0YW5jZS50b2dnbGVSb3dFdmVudC5zdWJzY3JpYmUodGhpcy50b2dnbGVSb3dFdmVudCk7XG5cdFx0aW5zdGFuY2UuZ3RFdmVudCA9IHRoaXMuZ3RFdmVudDtcblx0fVxufVxuIl19