/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import * as Tether from 'tether';
var GtDropdownComponent = /** @class */ (function () {
    function GtDropdownComponent(renderer) {
        this.renderer = renderer;
        this.selectedChange = new EventEmitter();
        this.active = false;
        this.state = new Subject();
    }
    Object.defineProperty(GtDropdownComponent.prototype, "selected", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selected;
        },
        set: /**
         * @param {?} selection
         * @return {?}
         */
        function (selection) {
            this._selected = selection;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} option
     * @return {?}
     */
    GtDropdownComponent.prototype.select = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        this.active = false;
        this.state.next(this.active);
        if (this._selected !== option) {
            this.selectedChange.emit(option);
        }
    };
    /**
     * @return {?}
     */
    GtDropdownComponent.prototype.toggleDropdown = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.active = !this.active;
        setTimeout(function () {
            _this.state.next(_this.active);
        }, 0);
    };
    /**
     * @return {?}
     */
    GtDropdownComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.state.subscribe(function (state) {
            if (state) {
                _this.tether = new Tether({
                    element: '#' + _this.id + '_menu',
                    target: '#' + _this.id,
                    attachment: 'top left',
                    targetAttachment: 'bottom left',
                    constraints: [
                        {
                            to: 'window',
                            attachment: 'together'
                        }
                    ]
                });
                _this.tether.position();
                // set up click listener and listen for click outside dropdown
                // set up click listener and listen for click outside dropdown
                _this.clickListener = _this.renderer.listen('document', 'click', function (event) {
                    _this.active = false;
                    _this.state.next(_this.active);
                });
                // set up keyboard listener and listen for escape key up
                // set up keyboard listener and listen for escape key up
                _this.keyupListener = _this.renderer.listen('document', 'keyup', function (event) {
                    switch (event.key) {
                        case 'Escape':
                            _this.active = false;
                            _this.state.next(_this.active);
                            break;
                    }
                });
            }
            else {
                _this.tether.destroy();
                _this.removeListeners();
            }
        });
    };
    /**
     * @return {?}
     */
    GtDropdownComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @return {?}
     */
    GtDropdownComponent.prototype.removeListeners = /**
     * @return {?}
     */
    function () {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.keyupListener) {
            this.keyupListener();
        }
    };
    GtDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gt-dropdown',
                    template: "\n    <div class=\"dropdown gt-dropdown\" [ngClass]=\"{'show':active}\" [attr.id]=\"id\">\n      <div class=\"dropdown-toggle\" (click)=\"toggleDropdown()\" [attr.aria-expanded]=\"active\">{{selected}}</div>\n      <div class=\"gt-dropdown-menu dropdown-menu\" *ngIf=\"active\" [ngClass]=\"{'show':active}\" [attr.id]=\"id+'_menu'\">\n        <button *ngFor=\"let option of options;\" class=\"dropdown-item\" (click)=\"select(option)\" [ngClass]=\"{'active':option === selected}\">{{option}}</button>\n      </div>\n    </div>\n  ",
                    styles: [
                        "\n    .gt-dropdown .dropdown-toggle {\n      cursor: pointer;\n    }\n    .gt-dropdown .dropdown-toggle::after {\n      transition: opacity 0.4s ease-in-out;\n      opacity: 0;\n    }\n    .gt-dropdown .dropdown-toggle:hover::after {\n      opacity: 1;\n    }\n  "
                    ]
                },] },
    ];
    /** @nocollapse */
    GtDropdownComponent.ctorParameters = function () { return [
        { type: Renderer2, },
    ]; };
    GtDropdownComponent.propDecorators = {
        "selected": [{ type: Input },],
        "options": [{ type: Input },],
        "id": [{ type: Input },],
        "selectedChange": [{ type: Output },],
    };
    return GtDropdownComponent;
}());
export { GtDropdownComponent };
function GtDropdownComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtDropdownComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtDropdownComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GtDropdownComponent.propDecorators;
    /** @type {?} */
    GtDropdownComponent.prototype._selected;
    /** @type {?} */
    GtDropdownComponent.prototype.options;
    /** @type {?} */
    GtDropdownComponent.prototype.id;
    /** @type {?} */
    GtDropdownComponent.prototype.selectedChange;
    /** @type {?} */
    GtDropdownComponent.prototype.active;
    /** @type {?} */
    GtDropdownComponent.prototype.state;
    /** @type {?} */
    GtDropdownComponent.prototype.tether;
    /** @type {?} */
    GtDropdownComponent.prototype.clickListener;
    /** @type {?} */
    GtDropdownComponent.prototype.keyupListener;
    /** @type {?} */
    GtDropdownComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,