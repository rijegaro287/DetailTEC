/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { GenericTableComponent } from './generic-table.component';
var GtPaginationComponent = /** @class */ (function () {
    function GtPaginationComponent() {
        this.ready = false;
    }
    Object.defineProperty(GtPaginationComponent.prototype, "genericTable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._genericTable;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (value) {
                value.gtEvent.subscribe(function (res) {
                    if (res.name === 'gt-info' && res.value.pageTotal > 0) {
                        _this.ready = true;
                    }
                });
            }
            this._genericTable = value;
        },
        enumerable: true,
        configurable: true
    });
    GtPaginationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gt-pagination',
                    template: "<nav class=\"gt-pagination\" aria-label=\"Table navigation\" *ngIf=\"genericTable && genericTable.gtInfo && ready && genericTable.gtData?.length > 0\" [ngClass]=\"{'no-data':genericTable.gtInfo.pageTotal === 0}\">\n  <ul class=\"pagination\" [ngClass]=\"gtClasses\">\n    <li class=\"page-item\" [ngClass]=\"{'disabled' : genericTable.gtInfo.pageCurrent === 1 || genericTable.loading }\"><a class=\"page-link\" href=\"javascript:void(0);\" (click)=\"genericTable.gtInfo.pageCurrent > 1 && genericTable.previousPage()\" [attr.aria-label]=\"genericTable.gtTexts.paginatePrevious\"><span aria-hidden=\"true\">&laquo;</span><span class=\"sr-only\">{{genericTable.gtTexts.paginatePrevious}}</span></a></li>\n    <li class=\"page-item\" [ngClass]=\"{'disabled' : genericTable.loading && genericTable.gtInfo.pageCurrent !== page, 'active' : genericTable.gtInfo.pageCurrent === page }\" *ngFor=\"let page of genericTable.gtInfo.pageTotal | gtPaginationPipe:genericTable.gtInfo.pageCurrent\"><a class=\"page-link\" [tabindex]=\"page === true ? -1:0\" href=\"javascript:void(0);\" (click)=\"page === true ? '':genericTable.goToPage(page)\">{{page === true ? '&hellip;':page}}</a></li>\n    <li class=\"page-item\" [ngClass]=\"{'disabled' : genericTable.gtInfo.pageCurrent === genericTable.gtInfo.pageTotal || genericTable.loading }\"><a class=\"page-link gt-link\" href=\"javascript:void(0);\" (click)=\"genericTable.gtInfo.pageCurrent !== genericTable.gtInfo.pageTotal && genericTable.nextPage()\" [attr.aria-label]=\"genericTable.gtTexts.paginateNext\"><span aria-hidden=\"true\">&raquo;</span><span class=\"sr-only\">{{genericTable.gtTexts.paginateNext}}</span></a></li>\n  </ul>\n  </nav>\n    ",
                    styles: ['.gt-link {cursor: pointer;}']
                },] },
    ];
    /** @nocollapse */
    GtPaginationComponent.propDecorators = {
        "genericTable": [{ type: Input },],
        "gtClasses": [{ type: Input },],
    };
    return GtPaginationComponent;
}());
export { GtPaginationComponent };
function GtPaginationComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtPaginationComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtPaginationComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GtPaginationComponent.propDecorators;
    /** @type {?} */
    GtPaginationComponent.prototype._genericTable;
    /** @type {?} */
    GtPaginationComponent.prototype.gtClasses;
    /** @type {?} */
    GtPaginationComponent.prototype.ready;
}
import { Pipe } from '@angular/core';
var PaginationPipe = /** @class */ (function () {
    function PaginationPipe() {
    }
    /**
     * @param {?} totalPages
     * @param {?} currentPage
     * @return {?}
     */
    PaginationPipe.prototype.transform = /**
     * @param {?} totalPages
     * @param {?} currentPage
     * @return {?}
     */
    function (totalPages, currentPage) {
        if (totalPages === 0) {
            return [1];
        }
        var /** @type {?} */ pagination = []; // create new empty array for pagination
        var /** @type {?} */ siblings = 2; // sibling elements ie. number of elements on each side of current page
        var /** @type {?} */ paginationLength = totalPages < siblings * 2 + 1 ? totalPages : siblings * 2 + 1; // number of elements in pagination array
        var /** @type {?} */ start = currentPage <= siblings ? 1 : currentPage - siblings; // starting position for array
        var /** @type {?} */ modifier = totalPages - (currentPage + siblings) <= 0
            ? totalPages - (currentPage + siblings)
            : 0; // modifier for pagination values
        var /** @type {?} */ modifiedPosition = start + modifier <= 0 ? 1 : start + modifier;
        // push pages to pagination array
        for (var /** @type {?} */ i = 0; i < paginationLength; i++) {
            pagination.push(modifiedPosition + i);
        }
        // if first page is not included in pagination...
        if (pagination.indexOf(1) === -1) {
            // ...check if second page is in pagination...
            if (pagination.indexOf(2) === -1) {
                // ...if not check if total number of pages equals seven and number of siblings are two...
                if (totalPages === 7 && siblings === 2) {
                    // ...add second page and don't convert page number to ellipsis
                    pagination.unshift(2);
                }
                else {
                    // ...if not, use this placeholder for ellipsis instead of actual page number
                    pagination[0] = true;
                }
            }
            // ...add first page as first array item
            pagination.unshift(1);
        }
        else if (totalPages > paginationLength) {
            // if first page is included add extra page to keep number of items consistent
            pagination.splice(paginationLength, 0, paginationLength + 1);
        }
        // check if last page is included in pagination...
        if (pagination.indexOf(totalPages) === -1) {
            // ...if not, page next to last should either show ellipsis or actual page number for the page
            pagination[pagination.length - 1] =
                pagination[pagination.length - 1] === totalPages - 1
                    ? totalPages - 1
                    : true;
            // ...add last page to pagination
            pagination.push(totalPages);
        }
        return pagination;
    };
    PaginationPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gtPaginationPipe'
                },] },
    ];
    return PaginationPipe;
}());
export { PaginationPipe };
function PaginationPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    PaginationPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    PaginationPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,