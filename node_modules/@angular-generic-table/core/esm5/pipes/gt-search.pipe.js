/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
// unsupported: template constraints.
/**
 * @template R
 */
var GtSearchPipe = /** @class */ (function () {
    function GtSearchPipe() {
        /**
         * Return property
         */
        this.getProperty = function (array, key) {
            for (var /** @type {?} */ i = 0; i < array.length; i++) {
                if (array[i].objectKey === key) {
                    return array[i];
                }
            }
        };
    }
    /**
     * @param {?} allRows
     * @param {?} searchTerms
     * @param {?} gtInfo
     * @param {?} settings
     * @param {?} fields
     * @param {?} refreshData
     * @return {?}
     */
    GtSearchPipe.prototype.transform = /**
     * @param {?} allRows
     * @param {?} searchTerms
     * @param {?} gtInfo
     * @param {?} settings
     * @param {?} fields
     * @param {?} refreshData
     * @return {?}
     */
    function (allRows, searchTerms, gtInfo, settings, fields, refreshData) {
        //  if no search terms are defined...
        if (!searchTerms || searchTerms.replace(/"/g, '').length === 0) {
            // ...return all rows
            var /** @type {?} */ length_1 = allRows === null ? 0 : allRows.length;
            gtInfo.recordsAfterSearch = length_1;
            return allRows;
        }
        var /** @type {?} */ searchFunction = {};
        var /** @type {?} */ fieldsTemp = [];
        for (var /** @type {?} */ k = 0; k < fields.length; k++) {
            var /** @type {?} */ field = fields[k];
            // check if field should be included in global search
            var /** @type {?} */ include = this.getProperty(settings, field.objectKey).search === false
                ? false
                : true;
            // if include...
            if (include) {
                // ...and if search function is defined...
                if (typeof field.search === 'function') {
                    // ...add it as search function for field
                    searchFunction[field.objectKey] = field.search;
                }
                else if (typeof field.value === 'function') {
                    // ...add it as search function for field
                    searchFunction[field.objectKey] = field.value;
                }
                // ...push it to our fields array
                fieldsTemp.push(field);
            }
        }
        var /** @type {?} */ filteredRows = [];
        searchTerms = typeof searchTerms === 'undefined' ? '' : searchTerms;
        var /** @type {?} */ searchTermsArray = searchTerms.toLowerCase().match(/(".*"|[^\s]+)/g);
        for (var /** @type {?} */ i = 0; i < allRows.length; i++) {
            var /** @type {?} */ row = allRows[i];
            var /** @type {?} */ string = '';
            for (var /** @type {?} */ j = 0; j < fieldsTemp.length; j++) {
                var /** @type {?} */ separator = j === 0 ? '' : ' & ';
                string += searchFunction[fieldsTemp[j].objectKey]
                    ? separator + searchFunction[fieldsTemp[j].objectKey](row, j)
                    : separator + row[fieldsTemp[j].objectKey];
            }
            string = string.toLowerCase();
            var /** @type {?} */ match = true;
            for (var /** @type {?} */ k = 0; k < searchTermsArray.length; k++) {
                var /** @type {?} */ term = searchTermsArray[k].replace(/"/g, '');
                match = string.indexOf(term) !== -1;
                if (!match) {
                    break;
                }
            }
            if (match) {
                filteredRows.push(row);
            }
        }
        gtInfo.recordsAfterSearch = filteredRows.length;
        // gtInfo.refresh(filteredRows.length,gt);
        return filteredRows;
    };
    GtSearchPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gtSearch'
                },] },
    ];
    return GtSearchPipe;
}());
export { GtSearchPipe };
function GtSearchPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtSearchPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtSearchPipe.ctorParameters;
    /**
     * Return property
     * @type {?}
     */
    GtSearchPipe.prototype.getProperty;
}

//# sourceMappingURL=data:application/json;base64,