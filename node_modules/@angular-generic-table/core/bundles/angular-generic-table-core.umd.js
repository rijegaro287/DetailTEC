(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('rxjs/ReplaySubject'), require('rxjs/Subject'), require('tether'), require('rxjs/Observable'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@angular-generic-table/core', ['exports', '@angular/core', '@angular/platform-browser', 'rxjs/ReplaySubject', 'rxjs/Subject', 'tether', 'rxjs/Observable', '@angular/common', '@angular/forms'], factory) :
    (factory((global['angular-generic-table'] = global['angular-generic-table'] || {}, global['angular-generic-table'].core = {}),global.ng.core,global.ng.platformBrowser,global.rxjs.ReplaySubject,global.rxjs.Subject,global.Tether,global.rxjs.Observable,global.ng.common,global.ng.forms));
}(this, (function (exports,core,platformBrowser,ReplaySubject,Subject,Tether,Observable,common,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    /**
     * @template R
     */
    var  
    // unsupported: template constraints.
    /**
     * @template R
     */
    GtExpandedRow = (function () {
        function GtExpandedRow() {
            this.redrawEvent = new core.EventEmitter();
            this.toggleRowEvent = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        GtExpandedRow.prototype.$hide = /**
         * @return {?}
         */
            function () {
                this.toggleRowEvent.emit(this.row);
            };
        /**
         * @param {?=} $event
         * @return {?}
         */
        GtExpandedRow.prototype.$redraw = /**
         * @param {?=} $event
         * @return {?}
         */
            function ($event) {
                this.redrawEvent.emit(this.row);
            };
        /**
         * @param {?} row
         * @param {?} $event
         * @return {?}
         */
        GtExpandedRow.prototype.$rowClick = /**
         * @param {?} row
         * @param {?} $event
         * @return {?}
         */
            function (row, $event) {
                this.gtEvent.emit({
                    name: 'gt-row-clicked',
                    value: { row: row, event: $event }
                });
            };
        return GtExpandedRow;
    }());
    // unsupported: template constraints.
    // unsupported: template constraints.
    /**
     * @template R, C
     */
    var GtExpandingRowComponent = (function () {
        function GtExpandingRowComponent() {
            this.redrawEvent = new core.EventEmitter();
            this.toggleRowEvent = new core.EventEmitter();
        }
        /**
         * @param {?} instance
         * @return {?}
         */
        GtExpandingRowComponent.prototype.newInstance = /**
         * @param {?} instance
         * @return {?}
         */
            function (instance) {
                instance.row = this.row;
                instance.columnWidth = this.columnWidth;
                instance.gtSettings = this.gtSettings;
                instance.gtFields = this.gtFields;
                instance.gtOptions = this.gtOptions;
                instance.gtInfo = this.gtInfo;
                instance.data =
                    typeof this.data === 'function' ? this.data(this.row) : this.data;
                instance.redrawEvent.subscribe(this.redrawEvent);
                instance.toggleRowEvent.subscribe(this.toggleRowEvent);
                instance.gtEvent = this.gtEvent;
            };
        GtExpandingRowComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gt-expanding-row',
                        template: "\n        <div gtComponentAnchor\n             [ctor]=\"type\" (instance)=\"newInstance($event)\"></div>"
                    },] },
        ];
        /** @nocollapse */
        GtExpandingRowComponent.propDecorators = {
            "type": [{ type: core.Input },],
            "row": [{ type: core.Input },],
            "columnWidth": [{ type: core.Input },],
            "gtSettings": [{ type: core.Input },],
            "gtFields": [{ type: core.Input },],
            "gtOptions": [{ type: core.Input },],
            "gtInfo": [{ type: core.Input },],
            "data": [{ type: core.Input },],
            "redrawEvent": [{ type: core.Output },],
            "toggleRowEvent": [{ type: core.Output },],
            "gtEvent": [{ type: core.Input },],
        };
        return GtExpandingRowComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtMetaPipe = (function () {
        function GtMetaPipe() {
        }
        /**
         * @param {?} allRows
         * @param {?=} rowIndex
         * @param {?=} page
         * @param {?=} recordLength
         * @return {?}
         */
        GtMetaPipe.prototype.transform = /**
         * @param {?} allRows
         * @param {?=} rowIndex
         * @param {?=} page
         * @param {?=} recordLength
         * @return {?}
         */
            function (allRows, rowIndex, page, recordLength) {
                for (var /** @type {?} */ i = 0; i < allRows.length; i++) {
                    if (!allRows[i].$$gtRowId) {
                        allRows[i].$$gtRowId = rowIndex
                            ? allRows[i][rowIndex]
                            : page
                                ? page * recordLength +
                                    i +
                                    '_' +
                                    Math.random()
                                        .toString(36)
                                        .substr(2, 16)
                                : i +
                                    '_' +
                                    Math.random()
                                        .toString(36)
                                        .substr(2, 16);
                    }
                    if (!allRows[i].$$gtInitialRowIndex) {
                        allRows[i].$$gtInitialRowIndex = i;
                    }
                }
                return allRows;
            };
        GtMetaPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtMeta'
                    },] },
        ];
        return GtMetaPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    // unsupported: template constraints.
    /**
     * @template R, C
     */
    var GenericTableComponent = (function () {
        function GenericTableComponent(renderer, gtMetaPipe) {
            var _this = this;
            this.renderer = renderer;
            this.gtMetaPipe = gtMetaPipe;
            this.columnWidth = {};
            this.sortOrder = [];
            this.metaInfo = {};
            this.selectedRows = [];
            this.openRows = [];
            this._gtSettings = [];
            this._gtFields = [];
            this.gtDefaultTexts = {
                loading: 'Loading...',
                noData: 'No data',
                noMatchingData: 'No data matching results found',
                noVisibleColumnsHeading: 'No visible columns',
                noVisibleColumns: 'Please select at least one column to be visible.',
                tableInfo: 'Showing #recordFrom to #recordTo of #recordsAfterSearch entries.',
                tableInfoAfterSearch: 'Showing  #recordFrom to #recordTo of #recordsAfterSearch entries (filtered from a total of #recordsAll entries).',
                csvDownload: 'download',
                sortLabel: 'Sort:',
                paginateNext: 'Next page',
                paginatePrevious: 'Previous page',
                inlineEditEdited: 'Press enter to save'
            };
            this.gtTexts = this.gtDefaultTexts;
            this.gtEvent = new core.EventEmitter();
            this.gtDefaultOptions = {
                csvDelimiter: ';',
                stack: false,
                lazyLoad: false,
                cache: false,
                debounceTime: 200,
                highlightSearch: false,
                rowSelection: false,
                rowSelectionAllowMultiple: true,
                rowExpandAllowMultiple: true,
                numberOfRows: 10,
                reportColumnWidth: false,
                allowUnsorted: true,
                mutateData: true
            };
            this._gtOptions = this.gtDefaultOptions;
            this.store = [];
            this.loading = true;
            this.debounceTimer = null;
            this.lazyAllSelected = false;
            this.gtInfo = {
                pageCurrent: 1,
                pageTotal: 0,
                recordFrom: 0,
                recordTo: 0,
                recordLength: this.gtOptions.numberOfRows,
                recordsAll: 0,
                recordsAfterFilter: 0,
                recordsAfterSearch: 0
            };
            this.refreshPipe = false;
            this.refreshTotals = false;
            this.refreshSorting = false;
            this.refreshFilter = false;
            this.refreshPageArray = false;
            this.editedRows = {};
            this.data = { exportData: [] };
            /**
             * Sort table by object key.
             * @param objectKey - name of key to sort on.
             * @param event - such as key press during sorting.
             */
            this.gtSort = function (objectKey, event) {
                this.inlineEditCancel(); // cancel inline editing
                // loop through current settings
                for (var /** @type {?} */ i = 0; i < this._gtSettings.length; i++) {
                    if (this._gtSettings[i].objectKey === objectKey) {
                        // check if sorting is disabled...
                        if (this._gtSettings[i].sort &&
                            this._gtSettings[i].sort.indexOf('disable') !== -1) {
                            // ...if so, exit function without applying any sorting
                            return;
                        }
                        else if (typeof this._gtSettings[i]
                            .sort === 'undefined') {
                            // ...is so, set sorting property to enable
                            this._gtSettings[i].sort = 'enable';
                        }
                    }
                }
                // check length
                var /** @type {?} */ ctrlKey = event.metaKey || event.ctrlKey;
                var /** @type {?} */ sort = this.sortOrder.slice(0);
                var /** @type {?} */ match = -1;
                var /** @type {?} */ matchDesc = -1;
                var /** @type {?} */ pos = -1;
                // check if property already exits
                for (var /** @type {?} */ i = 0; i < sort.length; i++) {
                    var /** @type {?} */ hit = sort[i].indexOf(objectKey);
                    if (hit !== -1) {
                        match = this.sortOrder.indexOf(objectKey);
                        matchDesc =
                            match === -1 ? this.sortOrder.indexOf('-' + objectKey) : match;
                        pos = Math.max(match, matchDesc);
                    }
                }
                // if ctrl key or meta key is press together with sort...
                if (ctrlKey) {
                    if (this.sortOrder[this.sortOrder.length - 1] === '$$gtInitialRowIndex') {
                        this.sortOrder.pop();
                    }
                    switch (pos) {
                        // ...and property is not sorted before...
                        case -1:
                            // ...add property to sorting
                            this.sortOrder.push(objectKey);
                            break;
                        default:
                            // ...and property is sorted before...
                            if (match !== -1) {
                                // ...change from asc to desc if sorted asc
                                this.sortOrder[pos] = '-' + objectKey;
                            }
                            else if (this.sortOrder.length > 1) {
                                // ...remove sorting if sorted desc
                                if (ctrlKey) {
                                    this.sortOrder[pos] = objectKey;
                                }
                                else {
                                    this.sortOrder.splice(pos, 1);
                                }
                            }
                            else if (this.sortOrder.length === 1) {
                                // ...set sorting to asc if only sorted property
                                this.sortOrder[pos] = objectKey;
                            }
                            break;
                    }
                }
                else {
                    /* if ctrl key or meta key is not press together with sort... */
                    switch (pos) {
                        // ...and property is not sorted before...
                        case -1:
                            // ...sort by property
                            this.sortOrder = [objectKey];
                            break;
                        default:
                            // ...change from desc to asc and vise versa
                            this.sortOrder =
                                match !== -1
                                    ? ['-' + objectKey]
                                    : ctrlKey || !this.gtOptions.allowUnsorted
                                        ? [objectKey]
                                        : [];
                            break;
                    }
                }
                // update settings object with new sorting information
                for (var /** @type {?} */ i = 0; i < this._gtSettings.length; i++) {
                    if (this._gtSettings[i].objectKey === objectKey) {
                        switch (this._gtSettings[i].sort) {
                            // if sorted asc...
                            case 'asc':
                                // ...change to desc
                                this._gtSettings[i].sort = 'desc';
                                break;
                            // if sorted desc...
                            case 'desc':
                                // ...change to asc if it's the only sorted property otherwise remove sorting
                                this._gtSettings[i].sort =
                                    (this.sortOrder.length === 1 && sort.length < 2) ||
                                        ctrlKey ||
                                        !this.gtOptions.allowUnsorted
                                        ? 'asc'
                                        : 'enable';
                                break;
                            // if sorting enabled...
                            case 'enable':
                                // ...change to asc
                                this._gtSettings[i].sort = 'asc';
                                break;
                        }
                        this._gtSettings[i].sortOrder =
                            this._gtSettings[i].sort === 'enable'
                                ? this._gtSettings.length - 1
                                : this.sortOrder.indexOf(objectKey) === -1
                                    ? this.sortOrder.indexOf('-' + objectKey)
                                    : this.sortOrder.indexOf(objectKey);
                    }
                    else if (this._gtSettings[i].sort &&
                        this._gtSettings[i].sort.indexOf('disable') === -1 &&
                        this.sortOrder.indexOf(this._gtSettings[i].objectKey) === -1 &&
                        this.sortOrder.indexOf('-' + this._gtSettings[i].objectKey) === -1) {
                        this._gtSettings[i].sort = 'enable';
                        this._gtSettings[i].sortOrder = this._gtSettings.length - 1;
                    }
                }
                // refresh sorting pipe
                this.refreshSorting = !this.refreshSorting;
                this.refreshPageArray = !this.refreshPageArray;
                // sort by initial sort order as last resort
                this.sortOrder.push('$$gtInitialRowIndex');
                // emit sort event
                this.gtEvent.emit({
                    name: 'gt-sorting-applied',
                    value: this.sortOrder
                });
            };
            /**
             * Change number of rows to be displayed.
             * @param rowLength - total number of rows.
             * @param reset - should page be reset to first page.
             */
            this.changeRowLength = function (rowLength, reset) {
                var /** @type {?} */ lengthValue = isNaN(parseInt(rowLength, 10))
                    ? 0
                    : parseInt(rowLength, 10);
                var /** @type {?} */ newPosition = 1;
                if (!lengthValue && this.gtData) {
                    lengthValue = this.gtData.length;
                }
                // if reset is not true and we're not lazy loading data...
                if (reset !== true && this._gtOptions.lazyLoad !== true) {
                    // ...get current position in record set
                    var /** @type {?} */ currentRecord = this.gtInfo.recordLength * (this.gtInfo.pageCurrent - 1);
                    var /** @type {?} */ currentPosition = this._gtData.indexOf(this._gtData[currentRecord]) + 1;
                    // ...get new position
                    newPosition = Math.ceil(currentPosition / lengthValue);
                }
                // change row length
                this.gtInfo.recordLength = lengthValue;
                // go to new position
                this.gtInfo.pageCurrent = newPosition;
                // if lazy loading data...
                if (this._gtOptions.lazyLoad) {
                    // ...replace data with place holders for new data
                    this._gtData[0] = this.loadingContent(lengthValue);
                    // ...empty current store
                    this.store = [];
                }
                // this.updateRecordRange();
                this.gtEvent.emit({
                    name: 'gt-row-length-changed',
                    value: lengthValue
                });
            };
            /**
             * Force a redraw of table rows.
             * As the table uses pure pipes, we need to force a redraw if an object in the array is changed to see the changes.
             */
            this.redraw = function ($event) {
                this.refreshSorting = !this.refreshSorting;
                this.refreshPageArray = !this.refreshPageArray;
                this.refreshPipe = !this.refreshPipe;
            };
            /**
             * Go to next page.
             */
            this.nextPage = function () {
                var /** @type {?} */ page = this.gtInfo.pageCurrent === this.gtInfo.pageTotal
                    ? this.gtInfo.pageTotal
                    : this.gtInfo.pageCurrent + 1;
                this.goToPage(page);
            };
            /**
             * Go to previous page.
             */
            this.previousPage = function () {
                var /** @type {?} */ page = this.gtInfo.pageCurrent === 1 ? 1 : this.gtInfo.pageCurrent - 1;
                this.goToPage(page);
            };
            /**
             * Request more data (used when lazy loading)
             */
            this.getData = function () {
                // ...emit event requesting for more data
                this.gtEvent.emit({
                    name: 'gt-page-changed-lazy',
                    value: {
                        pageCurrent: this.gtInfo.pageCurrent,
                        recordLength: this.gtInfo.recordLength
                    }
                });
            };
            /**
             * Go to specific page.
             * @param page - page number.
             */
            this.goToPage = function (page) {
                var _this = this;
                var /** @type {?} */ previousPage = this.gtInfo.pageCurrent;
                this.gtInfo.pageCurrent = page;
                this.inlineEditCancel(); // cancel inline edit
                // if lazy loading and if page contains no records...
                if (this._gtOptions.lazyLoad) {
                    // ...if data for current page contains no entries...
                    if (this._gtOptions.cache === false ||
                        this._gtData[this.gtInfo.pageCurrent - 1].length === 0) {
                        // ...create temporary content while waiting for data
                        this._gtData[this.gtInfo.pageCurrent - 1] = this.loadingContent(this.gtInfo.recordLength);
                        this.loading = true; // loading true
                    }
                    // ...if first entry in current page equals our loading placeholder...
                    if (this._gtData[this.gtInfo.pageCurrent - 1][0][this.loadingProperty] ===
                        this.gtTexts.loading) {
                        // ...get data
                        clearTimeout(this.debounceTimer);
                        this.debounceTimer = setTimeout(function () {
                            _this.getData();
                        }, this._gtOptions.debounceTime);
                    }
                }
                // this.updateRecordRange();
                // ...emit page change event
                if (previousPage !== page) {
                    this.gtEvent.emit({
                        name: 'gt-page-changed',
                        value: {
                            pageCurrent: this.gtInfo.pageCurrent,
                            pagePrevious: previousPage,
                            recordLength: this.gtInfo.recordLength
                        }
                    });
                }
            };
            /**
             * Sort by sort order
             */
            this.getSortOrder = function (a, b) {
                if (a.sortOrder < b.sortOrder) {
                    return -1;
                }
                if (a.sortOrder > b.sortOrder || typeof a.sortOrder === 'undefined') {
                    return 1;
                }
                return 0;
            };
            /**
             * Sort by column order
             */
            this.getColumnOrder = function (a, b) {
                if (a.columnOrder === undefined) {
                    return -1;
                }
                if (a.columnOrder < b.columnOrder) {
                    return -1;
                }
                if (a.columnOrder > b.columnOrder) {
                    return 1;
                }
                return 0;
            };
            /**
             * Create a deep copy of data
             */
            this.cloneDeep = function (o) {
                return JSON.parse(JSON.stringify(o));
            };
            /**
             * Return property
             */
            this.getProperty = function (array, key) {
                for (var /** @type {?} */ i = 0; i < array.length; i++) {
                    if (array[i].objectKey === key) {
                        return array[i];
                    }
                }
            };
            this.restructureSorting = function () {
                /**
                 * Check and store sort order upon initialization.
                 *  This is done by checking sort properties in the settings array of the table, if no sorting is defined
                 *  we'll sort the data by the first visible and enabled column in the table(ascending). Please note that actually
                 *  sorting have to be done server side when lazy loading data for obvious reasons.
                 */
                var /** @type {?} */ sorting = [];
                if (this._gtSettings) {
                    // ...sort settings by sort order
                    this._gtSettings.sort(this.getSortOrder);
                    // ...loop through settings
                    for (var /** @type {?} */ i = 0; i < this._gtSettings.length; i++) {
                        var /** @type {?} */ setting = this._gtSettings[i];
                        // ...if sorted ascending...
                        if (setting.sort === 'asc') {
                            // ... add to sorting
                            sorting.push(setting.objectKey);
                        }
                        else if (setting.sort === 'desc') {
                            /* ...else if sorted descending... */
                            // ... add to sorting
                            sorting.push('-' + setting.objectKey);
                        }
                    }
                    // ...if no sorting applied...
                    if (sorting.length === 0) {
                        sorting.push('$$gtRowId');
                        /*// ...sort settings by column order
                                        this._gtSettings.sort(this.getColumnOrder);
                        
                                        // ...loop through settings
                                        for (let i = 0; i < this._gtSettings.length; i++) {
                                            const setting = this._gtSettings[i];
                        
                                            // ...if column is enabled and visible...
                                            if (setting.enabled !== false && setting.visible !== false) {
                                                // ...add first match and exit function
                                                this.sortOrder = [this._gtSettings[i].objectKey];
                                                return;
                                            }
                                        }*/
                    }
                }
                if (this.sortOrder.length === 0) {
                    this.sortOrder = sorting;
                }
            };
            /**
             *  Extend object function.
             */
            this.extend = function (a, b) {
                for (var /** @type {?} */ key in b) {
                    if (b.hasOwnProperty(key)) {
                        a[key] = b[key];
                    }
                }
                return a;
            };
            this.gtEvent.subscribe(function ($event) {
                if ($event.name === 'gt-info') {
                    _this.updateRecordRange();
                }
                if ($event.name === 'gt-row-updated') {
                    _this.updateTotals();
                }
            });
        }
        Object.defineProperty(GenericTableComponent.prototype, "gtRowComponent", {
            get: /**
             * @return {?}
             */ function () {
                return this._gtRowComponent;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                console.warn('GtRowComponent has been deprecated and support will be removed in a future release, see https://github.com/hjalmers/angular-generic-table/issues/34');
                this._gtRowComponent = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenericTableComponent.prototype, "hasEdits", {
            get: /**
             * @return {?}
             */ function () {
                return Object.keys(this.editedRows).length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenericTableComponent.prototype, "gtOptions", {
            get: /**
             * @return {?}
             */ function () {
                return this._gtOptions;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._gtOptions = value;
                // if number of rows is passed and if number of rows differs from current record length...
                if (this.gtOptions.numberOfRows &&
                    this.gtInfo.recordLength !== this.gtOptions.numberOfRows) {
                    // ...update record length and redraw table
                    this.gtInfo.recordLength = this.gtOptions.numberOfRows;
                    this.redraw();
                }
                // ...extend gtOptions default values with values passed into component
                this._gtOptions = /** @type {?} */ (this.extend(this.gtDefaultOptions, this._gtOptions));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenericTableComponent.prototype, "gtTotals", {
            get: /**
             * @return {?}
             */ function () {
                return this._gtTotals;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._gtTotals = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenericTableComponent.prototype, "gtFields", {
            get: /**
             * @return {?}
             */ function () {
                return this._gtFields;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._gtFields = value;
                var /** @type {?} */ COLUMNS_WITH_CLASS_NAMES = this._gtFields
                    .map(function (column) { return column; })
                    .filter(function (column) { return column.classNames; });
                // TODO: remove deprecated warning when setting has been removed
                if (COLUMNS_WITH_CLASS_NAMES.length > 0) {
                    console.warn('Field setting "classNames" have been deprecated in favor for "columnClass" and will be removed in the future, please update field settings for column with object key: ' +
                        COLUMNS_WITH_CLASS_NAMES[0].objectKey);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenericTableComponent.prototype, "gtSettings", {
            get: /**
             * @return {?}
             */ function () {
                return this._gtSettings;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._gtSettings = value;
                // loop through current settings
                for (var /** @type {?} */ i = 0; i < this._gtSettings.length; i++) {
                    // set sort enabled/disabled setting
                    this._gtSettings[i].sortEnabled =
                        this._gtSettings[i].sortEnabled !== false
                            ? (this._gtSettings[i].sortEnabled = !(this._gtSettings[i].sort &&
                                this._gtSettings[i].sort.indexOf('disable') !== -1))
                            : false;
                    // check if sorting is undefined...
                    if (typeof this._gtSettings[i].sort === 'undefined') {
                        // ...is so, set sorting property to enable
                        this._gtSettings[i].sort = 'enable';
                    }
                    // check if column order is undefined...
                    if (typeof this._gtSettings[i].columnOrder === 'undefined' &&
                        this._gtSettings[i].enabled !== false) {
                        // ...is so, set sorting property to enable
                        this._gtSettings[i].columnOrder = this._gtSettings[i - 1]
                            ? this._gtSettings[i - 1].columnOrder + 1
                            : 0;
                    }
                    // check if column lock settings are undefined...
                    if (typeof this._gtSettings[i].lockSettings === 'undefined') {
                        // ...if so, set lock settings to false unless field is disabled (enable === false)
                        this._gtSettings[i].lockSettings =
                            this._gtSettings[i].enabled === false || false;
                    }
                }
                this.restructureSorting();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GenericTableComponent.prototype, "gtData", {
            get: /**
             * @return {?}
             */ function () {
                return this._gtData;
            },
            set: /**
             * @param {?} initialData
             * @return {?}
             */ function (initialData) {
                var _this = this;
                var /** @type {?} */ data = this._gtOptions.mutateData
                    ? __spread(initialData) : this.cloneDeep(initialData);
                if (this.gtOptions.lazyLoad && this.gtInfo) {
                    this.gtMetaPipe.transform(data, this.gtOptions.rowIndex, this.gtInfo.pageCurrent - 1, this.gtInfo.recordLength);
                    if (this.lazyAllSelected) {
                        var /** @type {?} */ UNIQUE_ROWS_1 = this.selectedRows.map(function (row) { return row.$$gtRowId; });
                        data.map(function (row) {
                            if (UNIQUE_ROWS_1.indexOf(row.$$gtRowId) === -1) {
                                _this.selectedRows.push(row);
                            }
                        });
                        this._updateMetaInfo(this.selectedRows, 'isSelected', true);
                    }
                }
                else {
                    this.gtMetaPipe.transform(data, this.gtOptions.rowIndex);
                }
                if (this.gtOptions.rowSelectionInitialState) {
                    data.map(function (row) {
                        var /** @type {?} */ selected = typeof _this.gtOptions.rowSelectionInitialState === 'function'
                            ? _this.gtOptions.rowSelectionInitialState(row)
                            : _this.gtOptions.rowSelectionInitialState;
                        if (selected) {
                            if (typeof _this.metaInfo[row.$$gtRowId] === 'undefined') {
                                _this.metaInfo[row.$$gtRowId] = { isSelected: true };
                            }
                            else {
                                _this.metaInfo[row.$$gtRowId].isSelected = true;
                            }
                            _this.selectedRows.push(row);
                        }
                    });
                }
                if (this.gtOptions.rowExpandInitialState &&
                    this.gtOptions.rowExpandInitialComponent) {
                    data.map(function (row) {
                        var /** @type {?} */ expanded = typeof _this.gtOptions.rowExpandInitialState === 'function'
                            ? _this.gtOptions.rowExpandInitialState(row)
                            : _this.gtOptions.rowExpandInitialState;
                        _this.expandedRow = _this.gtOptions.rowExpandInitialComponent;
                        if (expanded) {
                            if (typeof _this.metaInfo[row.$$gtRowId] === 'undefined') {
                                _this.metaInfo[row.$$gtRowId] = { isOpen: true };
                            }
                            else {
                                _this.metaInfo[row.$$gtRowId].isOpen = true;
                            }
                        }
                    });
                }
                this._gtData = data;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Update record range.
         * @return {?}
         */
        GenericTableComponent.prototype.updateRecordRange = /**
         * Update record range.
         * @return {?}
         */
            function () {
                this.gtInfo.recordFrom =
                    this.gtInfo.recordsAfterSearch === 0
                        ? 0
                        : (this.gtInfo.pageCurrent - 1) * this.gtInfo.recordLength + 1;
                this.gtInfo.recordTo =
                    this.gtInfo.recordsAfterSearch <
                        this.gtInfo.pageCurrent * this.gtInfo.recordLength
                        ? this.gtInfo.recordsAfterSearch
                        : this.gtInfo.pageCurrent * this.gtInfo.recordLength;
            };
        /**
         * Update totals.
         * @return {?}
         */
        GenericTableComponent.prototype.updateTotals = /**
         * Update totals.
         * @return {?}
         */
            function () {
                this.refreshTotals = !this.refreshTotals;
            };
        /**
         * Get meta data for row.
         * @param {?} row
         * @return {?}
         */
        GenericTableComponent.prototype.getRowState = /**
         * Get meta data for row.
         * @param {?} row
         * @return {?}
         */
            function (row) {
                return typeof this.metaInfo[row.$$gtRowId] === 'undefined'
                    ? null
                    : this.metaInfo[row.$$gtRowId];
            };
        /**
         * Expand all rows.
         * @param {?} expandedRow - component to render when rows are expanded.
         * @return {?}
         */
        GenericTableComponent.prototype.expandAllRows = /**
         * Expand all rows.
         * @param {?} expandedRow - component to render when rows are expanded.
         * @return {?}
         */
            function (expandedRow) {
                this.expandedRow = expandedRow;
                this._toggleAllRowProperty('isOpen', true);
            };
        /**
         * Collapse all rows.
         * @return {?}
         */
        GenericTableComponent.prototype.collapseAllRows = /**
         * Collapse all rows.
         * @return {?}
         */
            function () {
                this._toggleAllRowProperty('isOpen', false);
            };
        /**
         * Select all rows.
         * @return {?}
         */
        GenericTableComponent.prototype.selectAllRows = /**
         * Select all rows.
         * @return {?}
         */
            function () {
                this._toggleAllRowProperty('isSelected', true);
            };
        /**
         * Deselect all rows.
         * @return {?}
         */
        GenericTableComponent.prototype.deselectAllRows = /**
         * Deselect all rows.
         * @return {?}
         */
            function () {
                this._toggleAllRowProperty('isSelected', false);
            };
        /**
         * Toggle all rows.
         * @return {?}
         */
        GenericTableComponent.prototype.toggleAllRows = /**
         * Toggle all rows.
         * @return {?}
         */
            function () {
                if (this._gtOptions.lazyLoad) {
                    if (!this.lazyAllSelected || this.selectedRows.length === 0) {
                        this.selectAllRows();
                        this.lazyAllSelected = true;
                    }
                    else {
                        this.deselectAllRows();
                        this.lazyAllSelected = false;
                    }
                }
                else {
                    if (this.selectedRows.length !== this.gtData.length) {
                        this.selectAllRows();
                    }
                    else {
                        this.deselectAllRows();
                    }
                }
            };
        /**
         * Toggle row collapsed state ie. expanded/open or collapsed/closed.
         * @param {?} row - row object that should be expanded/collapsed.
         * @param {?=} expandedRow - component to render when row is expanded.
         * @return {?}
         */
        GenericTableComponent.prototype.toggleCollapse = /**
         * Toggle row collapsed state ie. expanded/open or collapsed/closed.
         * @param {?} row - row object that should be expanded/collapsed.
         * @param {?=} expandedRow - component to render when row is expanded.
         * @return {?}
         */
            function (row, expandedRow) {
                if (expandedRow) {
                    this.expandedRow = expandedRow;
                }
                this._toggleRowProperty(row, 'isOpen');
            };
        /**
         * Toggle row selected state ie. selected or not.
         * @param {?} row - row object that should be selected/deselected.
         * @return {?}
         */
        GenericTableComponent.prototype.toggleSelect = /**
         * Toggle row selected state ie. selected or not.
         * @param {?} row - row object that should be selected/deselected.
         * @return {?}
         */
            function (row) {
                this._toggleRowProperty(row, 'isSelected');
            };
        /**
         * @param {?} row
         * @param {?} $event
         * @return {?}
         */
        GenericTableComponent.prototype.rowClick = /**
         * @param {?} row
         * @param {?} $event
         * @return {?}
         */
            function (row, $event) {
                this.gtEvent.emit({
                    name: 'gt-row-clicked',
                    value: { row: row, event: $event }
                });
            };
        /**
         * Update row data.
         * @param {?} row - row object that has been edited.
         * @param {?} oldValue - row object before edit.
         * @return {?}
         */
        GenericTableComponent.prototype.updateRow = /**
         * Update row data.
         * @param {?} row - row object that has been edited.
         * @param {?} oldValue - row object before edit.
         * @return {?}
         */
            function (row, oldValue) {
                this._toggleRowProperty(row, 'isUpdated', oldValue);
            };
        /**
         * removes a row from the table
         * @param {?} row - the row object to remove
         * @return {?}
         */
        GenericTableComponent.prototype.removeRow = /**
         * removes a row from the table
         * @param {?} row - the row object to remove
         * @return {?}
         */
            function (row) {
                if (this.isRowSelected(row)) {
                    this.toggleSelect(row);
                }
                var /** @type {?} */ index = this._gtData.indexOf(row);
                this._gtData.splice(index, 1);
            };
        /**
         * check if a row is selected
         * @param {?} row - row object
         * @return {?}
         */
        GenericTableComponent.prototype.isRowSelected = /**
         * check if a row is selected
         * @param {?} row - row object
         * @return {?}
         */
            function (row) {
                return (this.metaInfo[row.$$gtRowId] && this.metaInfo[row.$$gtRowId].isSelected);
            };
        /**
         * Update meta info for all rows, ie. isSelected, isOpen.
         * @param {?} array - array that holds rows that need to be updated.
         * @param {?} property - name of property that should be changed/toggled.
         * @param {?} active - should rows be expanded/open, selected.
         * @param {?=} exception - update all rows except this one.
         * @return {?}
         */
        GenericTableComponent.prototype._updateMetaInfo = /**
         * Update meta info for all rows, ie. isSelected, isOpen.
         * @param {?} array - array that holds rows that need to be updated.
         * @param {?} property - name of property that should be changed/toggled.
         * @param {?} active - should rows be expanded/open, selected.
         * @param {?=} exception - update all rows except this one.
         * @return {?}
         */
            function (array, property, active, exception) {
                for (var /** @type {?} */ i = 0; i < array.length; i++) {
                    if (!this.metaInfo[array[i].$$gtRowId]) {
                        this.metaInfo[array[i].$$gtRowId] = {};
                    }
                    if (exception && array[i].$$gtRowId === exception.$$gtRowId) ;
                    else {
                        this.metaInfo[array[i].$$gtRowId][property] = active;
                    }
                }
            };
        /**
         * Push selected/expanded lazy loaded rows to array with meta data.
         * @param {?} target - array to which rows should be added.
         * @param {?} source - array that holds rows that should be added.
         * @return {?} array with added rows.
         */
        GenericTableComponent.prototype._pushLazyRows = /**
         * Push selected/expanded lazy loaded rows to array with meta data.
         * @param {?} target - array to which rows should be added.
         * @param {?} source - array that holds rows that should be added.
         * @return {?} array with added rows.
         */
            function (target, source) {
                var /** @type {?} */ UNIQUE_ROWS = target.map(function (row) { return row.$$gtRowId; });
                for (var /** @type {?} */ i = 0; i < source.length; i++) {
                    // only add if not already in list
                    if (UNIQUE_ROWS.indexOf(source[i].$$gtRowId) === -1) {
                        target.push(source[i]);
                    }
                }
                return target;
            };
        /**
         * Toggle meta info for all rows, ie. isSelected, isOpen.
         * @param {?} property - name of property that should be changed/toggled.
         * @param {?} active - should rows be expanded/open, selected.
         * @return {?}
         */
        GenericTableComponent.prototype._toggleAllRowProperty = /**
         * Toggle meta info for all rows, ie. isSelected, isOpen.
         * @param {?} property - name of property that should be changed/toggled.
         * @param {?} active - should rows be expanded/open, selected.
         * @return {?}
         */
            function (property, active) {
                var /** @type {?} */ eventName;
                var /** @type {?} */ eventValue;
                switch (property) {
                    case 'isOpen':
                        // check if multiple expanded rows are allowed...
                        if (this._gtOptions.rowExpandAllowMultiple === false) {
                            // ...if not, exit function
                            console.log('feature disabled: enable by setting "rowExpandAllowMultiple = true"');
                            return;
                        }
                        if (active) {
                            eventName = 'expand-all';
                            this.openRows = this._gtOptions.lazyLoad
                                ? this._pushLazyRows(this.openRows, this._gtData[this.gtInfo.pageCurrent - 1].slice())
                                : this._gtData.slice();
                            this._updateMetaInfo(this.openRows, property, active);
                        }
                        else {
                            eventName = 'collapse-all';
                            this._updateMetaInfo(this.openRows, property, active);
                            this.openRows = [];
                        }
                        eventValue = {
                            expandedRows: this.openRows,
                            changedRow: 'all'
                        };
                        break;
                    case 'isSelected':
                        // check if multi row selection is allowed...
                        if (this._gtOptions.rowSelectionAllowMultiple === false) {
                            // ...if not, exit function
                            console.log('feature disabled: enable by setting "rowSelectionAllowMultiple = true"');
                            return;
                        }
                        if (active) {
                            eventName = 'select-all';
                            this.selectedRows = this._gtOptions.lazyLoad
                                ? this._pushLazyRows(this.selectedRows, this._gtData[this.gtInfo.pageCurrent - 1].slice())
                                : this._gtData.slice();
                            this._updateMetaInfo(this.selectedRows, property, active);
                        }
                        else {
                            eventName = 'deselect-all';
                            this._updateMetaInfo(this.selectedRows, property, active);
                            this.selectedRows = [];
                        }
                        eventValue = {
                            selectedRows: this.selectedRows,
                            changedRow: 'all'
                        };
                        break;
                }
                this.gtEvent.emit({
                    name: 'gt-row-' + eventName,
                    value: eventValue
                });
            };
        /**
         * Toggle meta info for row, ie. isSelected, isOpen.
         * @param {?} row - row object.
         * @param {?} property - name of property that should be changed/toggled.
         * @param {?=} propertyValues - optional property values that can be passed.
         * @return {?}
         */
        GenericTableComponent.prototype._toggleRowProperty = /**
         * Toggle meta info for row, ie. isSelected, isOpen.
         * @param {?} row - row object.
         * @param {?} property - name of property that should be changed/toggled.
         * @param {?=} propertyValues - optional property values that can be passed.
         * @return {?}
         */
            function (row, property, propertyValues) {
                var /** @type {?} */ eventName;
                var /** @type {?} */ eventValue;
                // make sure gtRowId exists on row object
                if (typeof row.$$gtRowId !== 'undefined') {
                    // check if meta info exists for row
                    if (!this.metaInfo[row.$$gtRowId]) {
                        // if not, add object to store meta info
                        this.metaInfo[row.$$gtRowId] = {};
                    }
                    switch (property) {
                        case 'isOpen':
                            var /** @type {?} */ opened = this.metaInfo[row.$$gtRowId][property];
                            // check if multiple expanded rows are allowed...
                            if (this._gtOptions.rowExpandAllowMultiple === false) {
                                // ...if not, collapse all rows except current row
                                this._updateMetaInfo(this.openRows, property, false, row);
                                this.openRows = [];
                            }
                            // check if row is expanded
                            if (!opened) {
                                eventName = 'expand';
                                // add row to expanded rows
                                this.openRows.push(row);
                            }
                            else {
                                eventName = 'collapse';
                                // loop through expanded rows...
                                for (var /** @type {?} */ i = 0; i < this.openRows.length; i++) {
                                    // if expanded row equals passed row...
                                    if (this.openRows[i].$$gtRowId === row.$$gtRowId) {
                                        // ...remove row from expanded rows...
                                        this.openRows.splice(i, 1);
                                        // ...and exit loop
                                        break;
                                    }
                                }
                            }
                            eventValue = {
                                expandedRows: this.openRows,
                                changedRow: row
                            };
                            break;
                        case 'isSelected':
                            var /** @type {?} */ selected = this.metaInfo[row.$$gtRowId][property];
                            // check if multi row selection is allowed...
                            if (this._gtOptions.rowSelectionAllowMultiple === false) {
                                // ...if not, deselect all rows except current row
                                this._updateMetaInfo(this.selectedRows, property, false, row);
                                this.selectedRows = [];
                            }
                            // check if row is selected
                            if (!selected) {
                                eventName = 'select';
                                // add row to selected rows
                                this.selectedRows.push(row);
                            }
                            else {
                                if (this.gtOptions.lazyLoad && this.lazyAllSelected) {
                                    this.lazyAllSelected = false;
                                }
                                eventName = 'deselect';
                                // loop through selected rows...
                                for (var /** @type {?} */ i = 0; i < this.selectedRows.length; i++) {
                                    // if selected row equals passed row...
                                    if (this.selectedRows[i].$$gtRowId === row.$$gtRowId) {
                                        // ...remove row from selected rows...
                                        this.selectedRows.splice(i, 1);
                                        // ...and exit loop
                                        break;
                                    }
                                }
                            }
                            eventValue = {
                                selectedRows: this.selectedRows,
                                changedRow: row
                            };
                            break;
                        case 'isUpdated':
                            eventName = 'updated';
                            var /** @type {?} */ oldValue = propertyValues;
                            // check if edit object exists for row
                            if (typeof this.metaInfo[row.$$gtRowId][property] === 'undefined') {
                                this.metaInfo[row.$$gtRowId][property] = {
                                    originalValue: oldValue,
                                    oldValue: oldValue,
                                    newValue: row
                                };
                            }
                            else {
                                this.metaInfo[row.$$gtRowId][property].oldValue = oldValue;
                                this.metaInfo[row.$$gtRowId][property].newValue = row;
                            }
                            eventValue = this.metaInfo[row.$$gtRowId][property];
                            this.redraw();
                            this.inlineEditCancel(row);
                            // this.gtData = [...this.gtData.map((r) => { return{...r}; })];
                            break;
                    }
                    this.gtEvent.emit({
                        name: 'gt-row-' + eventName,
                        value: eventValue
                    });
                    if (property !== 'isUpdated') {
                        this.metaInfo[row.$$gtRowId][property] = !this.metaInfo[row.$$gtRowId][property];
                    }
                }
            };
        /**
         * Update column.
         * @param {?} $event - key up event.
         * @param {?} row - row object.
         * @param {?} column - column object.
         * @return {?}
         */
        GenericTableComponent.prototype.gtUpdateColumn = /**
         * Update column.
         * @param {?} $event - key up event.
         * @param {?} row - row object.
         * @param {?} column - column object.
         * @return {?}
         */
            function ($event, row, column) {
                this._editRow(row, column);
            };
        /**
         * Dropdown select.
         * @param {?} row - row object.
         * @param {?} column - column object.
         * @return {?}
         */
        GenericTableComponent.prototype.gtDropdownSelect = /**
         * Dropdown select.
         * @param {?} row - row object.
         * @param {?} column - column object.
         * @return {?}
         */
            function (row, column) {
                var /** @type {?} */ oldValue = __assign({}, row);
                row[column.objectKey] = column.renderValue;
                this.updateRow(row, oldValue);
            };
        /**
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
        GenericTableComponent.prototype._editRow = /**
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
            function (row, column) {
                var /** @type {?} */ OBJECT_KEY = column.objectKey; // declare object key which contains changes
                // check if cell has changed value
                column.edited = row[column.objectKey] !== column.renderValue;
                // check if row contains changes...
                if (!this.editedRows[row.$$gtRowId]) {
                    // if not, create an object for the changed row
                    this.editedRows[row.$$gtRowId] = {
                        changes: {},
                        // create placeholder for changes
                        row: row // store reference to the row that should be updated
                    };
                }
                // store changed column under changes if it has been edited
                if (column.edited) {
                    this.editedRows[row.$$gtRowId].changes[OBJECT_KEY] = column;
                }
                else {
                    // delete change object if column is unchanged
                    delete this.editedRows[row.$$gtRowId].changes[OBJECT_KEY];
                    // check how many columns have been changed
                    var /** @type {?} */ CHANGED_COLUMNS = Object.keys(this.editedRows[row.$$gtRowId].changes).length;
                    if (CHANGED_COLUMNS === 0) {
                        // delete row from edited rows if no columns have been edited
                        delete this.editedRows[row.$$gtRowId];
                    }
                }
                // if no listener is present...
                if (!this.globalInlineEditListener) {
                    // ...listen for update event
                    this._listenForKeydownEvent();
                }
            };
        /**
         * Listen for key down event - listen for key down event during inline edit.
         * @return {?}
         */
        GenericTableComponent.prototype._listenForKeydownEvent = /**
         * Listen for key down event - listen for key down event during inline edit.
         * @return {?}
         */
            function () {
                var _this = this;
                // add global listener for key down events
                this.globalInlineEditListener = this.renderer.listen('document', 'keydown', function ($event) {
                    switch ($event.key) {
                        case 'Enter':
                            // update data object
                            _this.inlineEditUpdate();
                            break;
                        case 'Escape':
                            // cancel
                            _this.inlineEditCancel();
                            break;
                    }
                });
            };
        /**
         * Inline edit update - accept changes and update row values.
         * @return {?}
         */
        GenericTableComponent.prototype.inlineEditUpdate = /**
         * Inline edit update - accept changes and update row values.
         * @return {?}
         */
            function () {
                var _this = this;
                // loop through rows that have been edited
                Object.keys(this.editedRows).map(function (key) {
                    var /** @type {?} */ ROW = _this.editedRows[key].row; // row to update
                    var /** @type {?} */ CHANGES = _this.editedRows[key].changes; // changes to the row
                    // loop through changes in row
                    Object.keys(CHANGES).map(function (objectKey) {
                        var /** @type {?} */ oldValue = __assign({}, ROW);
                        ROW[objectKey] = CHANGES[objectKey].renderValue; // update data value
                        _this.updateRow(ROW, oldValue); // update meta info for row and send event
                        CHANGES[objectKey].edited = false; // disable edit mode
                    });
                });
                // clear rows marked as edited as the rows have been updated
                this.editedRows = {};
                // remove listener
                this._stopListeningForKeydownEvent();
            };
        /**
         * Inline edit cancel - cancel and reset inline edits.
         * @param {?=} row
         * @return {?}
         */
        GenericTableComponent.prototype.inlineEditCancel = /**
         * Inline edit cancel - cancel and reset inline edits.
         * @param {?=} row
         * @return {?}
         */
            function (row) {
                var _this = this;
                if (row) {
                    delete this.editedRows[row.$$gtRowId];
                    // remove listener
                    this._stopListeningForKeydownEvent();
                    return;
                }
                // loop through rows that have been edited
                Object.keys(this.editedRows).map(function (key) {
                    var /** @type {?} */ ROW = _this.editedRows[key].row; // row to update
                    var /** @type {?} */ CHANGES = _this.editedRows[key].changes; // changes to the row
                    // loop through changes in row
                    Object.keys(CHANGES).map(function (objectKey) {
                        CHANGES[objectKey].renderValue = ROW[objectKey]; // reset rendered value
                        CHANGES[objectKey].edited = false; // disable edit mode
                    });
                });
                // clear rows marked as edited as the rows have been updated
                this.editedRows = {};
                // remove listener
                this._stopListeningForKeydownEvent();
            };
        /**
         * Stop listening for key down event - stop listening for key down events passed during inline edit.
         * @return {?}
         */
        GenericTableComponent.prototype._stopListeningForKeydownEvent = /**
         * Stop listening for key down event - stop listening for key down events passed during inline edit.
         * @return {?}
         */
            function () {
                if (this.globalInlineEditListener) {
                    this.globalInlineEditListener();
                    this.globalInlineEditListener = null;
                }
            };
        /**
         * Apply filter(s).
         * @param {?} filter - object containing key value pairs, where value should be array of values.
         * @return {?}
         */
        GenericTableComponent.prototype.gtApplyFilter = /**
         * Apply filter(s).
         * @param {?} filter - object containing key value pairs, where value should be array of values.
         * @return {?}
         */
            function (filter) {
                this.gtInfo.filter = filter;
                // go to first page
                this.goToPage(1);
                this.updateTotals();
            };
        /**
         * Clear/remove applied filter(s).
         * @return {?}
         */
        GenericTableComponent.prototype.gtClearFilter = /**
         * Clear/remove applied filter(s).
         * @return {?}
         */
            function () {
                this.gtInfo.filter = false;
                this.updateTotals();
                // this.updateRecordRange();
            };
        /**
         * Search
         * @param {?} value - string containing one or more words
         * @return {?}
         */
        GenericTableComponent.prototype.gtSearch = /**
         * Search
         * @param {?} value - string containing one or more words
         * @return {?}
         */
            function (value) {
                this.gtInfo.searchTerms = value;
                // always go to first page when searching
                this.goToPage(1);
                this.updateTotals();
            };
        /**
         * Add rows
         * @param {?} rows - rows to add
         * @return {?} new data array.
         */
        GenericTableComponent.prototype.gtAdd = /**
         * Add rows
         * @param {?} rows - rows to add
         * @return {?} new data array.
         */
            function (rows) {
                this.gtData = __spread(this.gtData, rows);
                return __spread(this.gtData);
            };
        /**
         * Delete row
         * @param {?} objectKey - object key you want to find match with
         * @param {?} value - the value that should be deleted
         * @param {?=} match - all: delete all matches, first: delete first match (default)
         * @return {?} new data array.
         */
        GenericTableComponent.prototype.gtDelete = /**
         * Delete row
         * @param {?} objectKey - object key you want to find match with
         * @param {?} value - the value that should be deleted
         * @param {?=} match - all: delete all matches, first: delete first match (default)
         * @return {?} new data array.
         */
            function (objectKey, value, match) {
                if (match === void 0) {
                    match = 'first';
                }
                if (match === 'first') {
                    for (var /** @type {?} */ i = 0; i < this.gtData.length; i++) {
                        if (this.gtData[i][objectKey] === value) {
                            if (this.isRowSelected(this.gtData[i])) {
                                this.toggleSelect(this.gtData[i]);
                            }
                            this.gtData.splice(i, 1);
                            this.gtData = __spread(this.gtData);
                            if (match === 'first') {
                                break;
                            }
                        }
                    }
                }
                else {
                    for (var /** @type {?} */ i = this.gtData.length; i > 0; i--) {
                        if (this.gtData[i - 1][objectKey] === value) {
                            if (this.isRowSelected(this.gtData[i - 1])) {
                                this.toggleSelect(this.gtData[i - 1]);
                            }
                            this.gtData.splice(i - 1, 1);
                            this.gtData = __spread(this.gtData);
                        }
                    }
                }
                return __spread(this.gtData);
            };
        /**
         * Create store to hold previously loaded records.
         * @param {?} records - total number of records in store.
         * @param {?} perPage - how many records to show per page.
         * @return {?} a nested array to hold records per page.
         */
        GenericTableComponent.prototype.createStore = /**
         * Create store to hold previously loaded records.
         * @param {?} records - total number of records in store.
         * @param {?} perPage - how many records to show per page.
         * @return {?} a nested array to hold records per page.
         */
            function (records, perPage) {
                var /** @type {?} */ stores = Math.ceil(records / perPage);
                var /** @type {?} */ store = [];
                for (var /** @type {?} */ i = 0; i < stores; i++) {
                    store[i] = [];
                }
                return store;
            };
        /**
         * Create placeholders for rows while loading data from back-end.
         * @param {?} perPage - how many records to show per page.
         * @return {?} an array containing empty records to be presented while fetching real data.
         */
        GenericTableComponent.prototype.loadingContent = /**
         * Create placeholders for rows while loading data from back-end.
         * @param {?} perPage - how many records to show per page.
         * @return {?} an array containing empty records to be presented while fetching real data.
         */
            function (perPage) {
                // create row object
                var /** @type {?} */ rowObject = {
                    $$loading: true
                };
                var /** @type {?} */ order = 0;
                // sort settings by column order
                this._gtSettings.sort(this.getColumnOrder);
                // loop through all settings objects...
                for (var /** @type {?} */ i = 0; i < this._gtSettings.length; i++) {
                    var /** @type {?} */ setting = this._gtSettings[i];
                    // ...if column is visible and enabled...
                    if (setting.visible !== false && setting.enabled !== false) {
                        // ...if first column, set value to loading text otherwise leave it empty
                        if (order === 0) {
                            rowObject[setting.objectKey] = this.gtTexts.loading;
                            this.loadingProperty = setting.objectKey;
                        }
                        else {
                            rowObject[setting.objectKey] = '';
                        }
                        order++;
                    }
                    else {
                        rowObject[setting.objectKey] = '';
                    }
                }
                // create content placeholder
                var /** @type {?} */ contentPlaceholder = [];
                // create equal number of rows as rows per page
                for (var /** @type {?} */ i = 0; i < perPage; i++) {
                    // ...add temporary row object
                    contentPlaceholder.push(rowObject);
                }
                return contentPlaceholder;
            };
        /**
         * Export data as CSV
         * @param {?=} fileName - optional file name (overrides default file name).
         * @param {?=} useBOM - use BOM (byte order marker).
         * @return {?}
         */
        GenericTableComponent.prototype.exportCSV = /**
         * Export data as CSV
         * @param {?=} fileName - optional file name (overrides default file name).
         * @param {?=} useBOM - use BOM (byte order marker).
         * @return {?}
         */
            function (fileName, useBOM) {
                var _this = this;
                if (useBOM === void 0) {
                    useBOM = false;
                }
                var /** @type {?} */ data = this.data.exportData;
                var /** @type {?} */ csv = '';
                var /** @type {?} */ BOM = '\uFEFF';
                // csv export headers
                for (var /** @type {?} */ i = 0; i < this._gtSettings.length; i++) {
                    if (this._gtSettings[i].export !== false) {
                        // get field settings
                        var /** @type {?} */ fieldSetting = this.getProperty(this._gtFields, this._gtSettings[i].objectKey);
                        // get export value, if exportHeader string is defined use it otherwise returns name
                        var /** @type {?} */ exportValue = fieldSetting.exportHeader
                            ? fieldSetting.exportHeader
                            : fieldSetting.name;
                        csv += this.escapeCSVDelimiter(exportValue);
                        csv += this.getProperty(this._gtFields, this._gtSettings[i].objectKey)
                            .name;
                        if (i < this._gtSettings.length - 1) {
                            csv += this._gtOptions.csvDelimiter;
                        }
                    }
                }
                // csv export body
                data.forEach(function (row) {
                    csv += '\n';
                    for (var /** @type {?} */ i = 0; i < _this._gtSettings.length; i++) {
                        if (_this._gtSettings[i].export !== false) {
                            // get field settings
                            var /** @type {?} */ fieldSetting = _this.getProperty(_this._gtFields, _this._gtSettings[i].objectKey);
                            // get export value, if export function is defined use it otherwise check for value function and as a last resort export raw data
                            var /** @type {?} */ exportValue = fieldSetting.export && typeof fieldSetting.export === 'function'
                                ? fieldSetting.export(row)
                                : fieldSetting.value && typeof fieldSetting.value === 'function'
                                    ? fieldSetting.value(row)
                                    : row[_this._gtSettings[i].objectKey];
                            csv += _this.escapeCSVDelimiter(exportValue);
                            if (i < _this._gtSettings.length - 1) {
                                csv += _this._gtOptions.csvDelimiter;
                            }
                        }
                    }
                });
                var /** @type {?} */ blob = new Blob([(useBOM ? BOM : '') + csv], {
                    type: 'text/csv;charset=utf-8'
                });
                if (window.navigator.msSaveOrOpenBlob) {
                    navigator.msSaveOrOpenBlob(blob, fileName ? fileName + '.csv' : this.gtTexts.csvDownload + '.csv');
                }
                else {
                    var /** @type {?} */ link = document.createElement('a');
                    link.style.display = 'none';
                    document.body.appendChild(link);
                    if (link.download !== undefined) {
                        link.setAttribute('href', 'data:text/csv;charset=utf-8,' +
                            encodeURIComponent((useBOM ? BOM : '') + csv)); // URL.createObjectURL(blob));
                        link.setAttribute('download', fileName ? fileName + '.csv' : this.gtTexts.csvDownload + '.csv');
                        document.body.appendChild(link);
                        link.click();
                    }
                    else {
                        csv = 'data:text/csv;charset=utf-8,' + (useBOM ? BOM : '') + csv;
                        window.open(encodeURIComponent(csv));
                    }
                    document.body.removeChild(link);
                }
                // emit export event
                this.gtEvent.emit({
                    name: 'gt-exported-csv',
                    value: fileName ? fileName : this.gtTexts.csvDownload + '.csv'
                });
            };
        /**
         * Escape export value using double quotes (") if export value contains delimiter
         * @param {?} value Value to be escaped
         * @return {?}
         */
        GenericTableComponent.prototype.escapeCSVDelimiter = /**
         * Escape export value using double quotes (") if export value contains delimiter
         * @param {?} value Value to be escaped
         * @return {?}
         */
            function (value) {
                return typeof value === 'string' &&
                    value.indexOf(this._gtOptions.csvDelimiter) !== -1
                    ? '"' + value + '"'
                    : value;
            };
        /**
         * @return {?}
         */
        GenericTableComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // if number of row to display from start is set to null or 0...
                if (!this.gtOptions.numberOfRows) {
                    // ...change row length
                    this.changeRowLength(this.gtOptions.numberOfRows);
                }
                this.restructureSorting();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        GenericTableComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                // if gt texts have changed...
                if (changes['gtTexts']) {
                    // ...extend gtOptions default values with values passed into component
                    this.gtTexts = /** @type {?} */ (this.extend(this.gtDefaultTexts, this.gtTexts));
                }
                // if lazy loading data and paging information is available...
                if (this.gtOptions.lazyLoad && this.gtInfo) {
                    // ...calculate total number of pages
                    this.gtInfo.pageTotal = Math.ceil(this.gtInfo.recordsAfterSearch / this.gtInfo.recordLength);
                    // ...declare store position
                    var /** @type {?} */ storePosition = this.gtInfo.pageCurrent - 1;
                    // ...and if store is empty or page length has changed...
                    if (this.store.length === 0 ||
                        this.store[0].length !== this.gtInfo.recordLength) {
                        // ...create store
                        this.store = this.createStore(this.gtInfo.recordsAfterSearch, this.gtInfo.recordLength);
                    }
                    // ...store retrieved data in store at store position
                    this.store[storePosition] = this.gtData;
                    this.gtInfo.visibleRecords = __spread(this.gtData); // add visible rows
                    // replace data with store
                    this._gtData = this.store;
                    this.loading = false;
                    this.updateRecordRange();
                    this.gtEvent.emit({
                        name: 'gt-info',
                        value: this.gtInfo
                    });
                }
                else if (this._gtData &&
                    this._gtData.length >= 0 &&
                    changes['gtData'] &&
                    changes['gtData'].previousValue) {
                    this.loading = false;
                }
                else if (changes['gtData'] &&
                    changes['gtData'].firstChange &&
                    this._gtData &&
                    this._gtData.length > 0) {
                    this.loading = false;
                }
            };
        /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        GenericTableComponent.prototype.trackByFn = /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
            function (index, item) {
                return item.$$gtRowId;
            };
        /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        GenericTableComponent.prototype.trackByColumnFn = /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
            function (index, item) {
                return item.objectKey;
            };
        /**
         * @return {?}
         */
        GenericTableComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                // remove listener
                this._stopListeningForKeydownEvent();
            };
        GenericTableComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'generic-table',
                        template: "<table class=\"table\" ngClass=\"{{gtClasses}} {{gtOptions.stack ? 'table-stacked':''}}\"\n       *ngIf=\"gtFields && gtSettings && (gtFields | gtVisible:gtSettings:refreshPipe).length > 0\">\n  <thead>\n  <tr>\n    <th class=\"gt-sort-label\" *ngIf=\"gtOptions.stack\">{{gtTexts.sortLabel}}</th>\n    <th *ngFor=\"let column of gtSettings | gtVisible:gtSettings:refreshPipe\"\n        ngClass=\"{{column.objectKey +'-column' | dashCase}} {{gtFields | gtProperty:column.objectKey:'classNames'}} {{column.sortEnabled ? 'sort-'+column.sort:''}} {{column.sortEnabled && column.sortOrder >= 0  ? 'sort-order-'+column.sortOrder:''}} {{ gtFields | gtColumnClass:column }}\"\n        (click)=\"column.sortEnabled ? gtSort(column.objectKey,$event):'';\">\n      <span *ngIf=\"!(gtFields | gtProperty:column.objectKey:'header')\">{{gtFields | gtProperty:column.objectKey:'name'}}</span>\n      <gt-custom-component-factory *ngIf=\"(gtFields | gtProperty:column.objectKey:'header')\"\n                                   [type]=\"(gtFields | gtProperty:column.objectKey:'header')?.type\"\n                                   [injector]=\"(gtFields | gtProperty:column.objectKey:'header')?.injector\"\n                                   [column]=\"gtFields | gtProperty:column.objectKey:'name'\"></gt-custom-component-factory>\n      <gt-checkbox *ngIf=\"(gtFields | gtProperty:column.objectKey:'columnComponent')?.type === 'checkbox'\" [checked]=\"(gtOptions.lazyLoad ? lazyAllSelected:selectedRows.length === gtData.length)\" (changed)=\"toggleAllRows()\"></gt-checkbox>\n    </th>\n  </tr>\n  </thead>\n  <ng-template\n    [ngIf]=\"gtTotals && (gtOptions.lazyLoad === false ? (gtData | gtFilter:gtInfo.filter:gtInfo:refreshFilter:gtData.length | gtSearch:gtInfo.searchTerms:gtInfo:gtSettings:gtFields:gtData.length).length > 0 : gtData.length > 0)\">\n    <thead class=\"gt-totals\">\n    <tr *ngFor=\"let total of gtTotals | gtTotalsPosition\">\n      <td *ngFor=\"let column of gtSettings | gtVisible:gtSettings:refreshPipe;let i = index;\"\n          ngClass=\"{{column.objectKey +'-totals-column' | dashCase}} {{gtFields | gtProperty:column.objectKey:'classNames'}} {{ gtFields | gtColumnClass:column }}\">\n        <span *ngIf=\"i === 0\" class=\"float-left\">{{total.name}}</span><span\n        [innerHTML]=\"total.fields[column.objectKey] | gtTotals:(total.update === false || gtOptions.lazyLoad === true) ? gtData:(gtData | gtFilter:gtInfo.filter:gtInfo:refreshFilter:gtData.length | gtSearch:gtInfo.searchTerms:gtInfo:gtSettings:gtFields:gtData.length):column.objectKey:refreshTotals\"></span>\n      </td>\n    </tr>\n    </thead>\n    <tfoot class=\"gt-totals\">\n    <tr *ngFor=\"let total of gtTotals | gtTotalsPosition:'footer'\">\n      <td *ngFor=\"let column of gtSettings | gtVisible:gtSettings:refreshPipe;let i = index;\"\n          ngClass=\"{{column.objectKey +'-totals-column' | dashCase}} {{gtFields | gtProperty:column.objectKey:'classNames'}} {{ gtFields | gtColumnClass:column }}\">\n        <span *ngIf=\"i === 0\" class=\"float-left\">{{total.name}}</span><span\n        [innerHTML]=\"total.fields[column.objectKey] | gtTotals:(total.update === false || gtOptions.lazyLoad === true) ? gtData:(gtData | gtFilter:gtInfo.filter:gtInfo:refreshFilter:gtData.length | gtSearch:gtInfo.searchTerms:gtInfo:gtSettings:gtFields:gtData.length):column.objectKey:refreshTotals\"></span>\n      </td>\n    </tr>\n    </tfoot>\n  </ng-template>\n  <tbody *ngIf=\"gtData && gtInfo\">\n  <ng-template class=\"table-rows\" ngFor let-row let-last=\"last\" [ngForTrackBy]=\"trackByFn\"\n               [ngForOf]=\"gtOptions.lazyLoad && gtInfo ? (gtData[gtInfo.pageCurrent-1]) : (gtData | gtFilter:gtInfo.filter:gtInfo:refreshFilter:gtData.length | gtSearch:gtInfo.searchTerms:gtInfo:gtSettings:gtFields:gtData.length | gtOrderBy:sortOrder:gtFields:refreshSorting:gtData.length | gtChunk:gtInfo:gtInfo.recordLength:gtInfo.pageCurrent:refreshPageArray:gtData.length:gtEvent:data | gtRowClass:gtFields)\">\n    <tr [ngClass]=\"{'row-selected':metaInfo[row.$$gtRowId]?.isSelected, 'row-open':metaInfo[row.$$gtRowId]?.isOpen, 'row-loading':loading, 'row-expandable':gtRowComponent}\"\n        class=\"{{row.$$gtRowClass}}\"\n        (click)=\"gtOptions.rowSelection ? toggleSelect(row):rowClick(row, $event)\">\n      <td *ngFor=\"let column of row | gtRender:gtSettings:gtFields:refreshPipe:loading:gtOptions.highlightSearch:gtInfo.searchTerms;trackBy:trackByColumnFn\"\n          ngClass=\"{{column.objectKey +'-column' | dashCase}} {{gtFields | gtProperty:column.objectKey:'classNames'}} {{(gtFields | gtProperty:column.objectKey:'inlineEdit') ? 'gt-inline-edit':''}} {{column.edited ? 'gt-edited':''}} {{ gtFields | gtColumnClass:column:row }}\">\n                        <span class=\"gt-row-label\"\n                              *ngIf=\"gtOptions.stack\">{{(gtFields | gtProperty:column.objectKey:'stackedHeading') ? (gtFields | gtProperty:column.objectKey:'stackedHeading') : (gtFields | gtProperty:column.objectKey:'name')}}</span>\n        <gt-custom-component-factory *ngIf=\"column.columnComponent && column.columnComponent.type !== 'checkbox'\" class=\"gt-row-content\"\n                                     [type]=\"column.columnComponent.type\"\n                                     [injector]=\"column.columnComponent.injector\" [row]=\"row\"\n                                     [column]=\"column\" (redrawEvent)=\"redraw($event)\"\n                                     [searchTerms]=\"gtInfo.searchTerms\"  (searchEvent)=\"redraw($event)\"\n                                     (click)=\"column.click ? column.click(row,column,$event):'';column.expand ? toggleCollapse(row, column.expand):''\"></gt-custom-component-factory>\n        <span *ngIf=\"!column.columnComponent && (!(gtFields | gtProperty:column.objectKey:'inlineEdit') || ((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | gtIsObservable) && !((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | async) || (!((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | gtIsObservable) && !((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | gtIsEditable:row:refreshPipe)))\"\n              class=\"gt-row-content\" [innerHTML]=\"column.renderValue\"\n              (click)=\"column.click ? column.click(row,column,$event):'';column.expand ? toggleCollapse(row, column.expand):''\"></span>\n        <ng-template\n          [ngIf]=\"!column.columnComponent && (((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | gtIsObservable) && ((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | async) || ((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | gtIsEditable:row:refreshPipe))\">\n          <ng-template [ngIf]=\"([true,'email','number','password', 'text'].indexOf((gtFields | gtProperty:column.objectKey:'inlineEdit').type) !== -1) || !(gtFields | gtProperty:column.objectKey:'inlineEdit').type\">\n            <input class=\"inline-edit\" [attr.type]=\"!(gtFields | gtProperty:column.objectKey:'inlineEdit').type ? 'text' : !((gtFields | gtProperty:column.objectKey:'inlineEdit').type | gtIsObservable) ? (gtFields | gtProperty:column.objectKey:'inlineEdit').type:(gtFields | gtProperty:column.objectKey:'inlineEdit').type | async\" [(ngModel)]=\"column.renderValue\"\n                   (input)=\"gtUpdateColumn($event,row, column)\">\n            <span class=\"gt-inline-edit-notice\">{{gtTexts.inlineEditEdited}}</span>\n          </ng-template>\n          <gt-dropdown\n            *ngIf=\"(((gtFields | gtProperty:column.objectKey:'inlineEdit').type) && ((gtFields | gtProperty:column.objectKey:'inlineEdit').type).length > 0) || ((gtFields | gtProperty:column.objectKey:'inlineEdit').type | gtIsObservable)\"\n            [options]=\"!((gtFields | gtProperty:column.objectKey:'inlineEdit').type | gtIsObservable) ? (gtFields | gtProperty:column.objectKey:'inlineEdit').type : (gtFields | gtProperty:column.objectKey:'inlineEdit').type | async\"\n            [id]=\"'_' + row.$$gtRowId + '_' + column.objectKey\"\n            [(selected)]=\"column.renderValue\" (selectedChange)=\"gtDropdownSelect(row, column)\">Add\n            inline editing module\n          </gt-dropdown>\n        </ng-template>\n        <ng-template [ngIf]=\"!column.columnComponent && !((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active) \">\n          <ng-template\n            [ngIf]=\"[true,'email','number','password'].indexOf(gtFields | gtProperty:column.objectKey:'inlineEdit') !== -1\">\n            <input class=\"inline-edit\" [attr.type]=\"(gtFields | gtProperty:column.objectKey:'inlineEdit') === true ? 'text':(gtFields | gtProperty:column.objectKey:'inlineEdit')\" [(ngModel)]=\"column.renderValue\"\n                   (input)=\"gtUpdateColumn($event,row, column)\">\n            <span class=\"gt-inline-edit-notice\">{{gtTexts.inlineEditEdited}}</span>\n          </ng-template>\n          <gt-dropdown\n            *ngIf=\"(gtFields | gtProperty:column.objectKey:'inlineEdit') && [true,'email','number','password'].indexOf(gtFields | gtProperty:column.objectKey:'inlineEdit') === -1\"\n            [options]=\"gtFields | gtProperty:column.objectKey:'inlineEdit'\"\n            [id]=\"'_' + row.$$gtRowId + '_' + column.objectKey\"\n            [(selected)]=\"column.renderValue\" (selectedChange)=\"gtDropdownSelect(row, column)\">Add\n            inline editing module\n          </gt-dropdown>\n        </ng-template>\n        <gt-checkbox *ngIf=\"column.columnComponent && column.columnComponent.type === 'checkbox'\" [checked]=\"metaInfo[row.$$gtRowId]?.isSelected\" (changed)=\"toggleSelect(row)\"></gt-checkbox>\n      </td>\n    </tr>\n    <tr class=\"row-expanded\" *ngIf=\"metaInfo[row.$$gtRowId]?.isOpen\">\n      <td [attr.colspan]=\"(gtFields | gtVisible:gtSettings:refreshPipe).length\">\n        <gt-expanding-row [row]=\"row\"\n                          [type]=\"expandedRow.component ? expandedRow.component:gtRowComponent\"\n                          [columnWidth]=\"columnWidth\"\n                          [gtFields]=\"gtFields\"\n                          [gtOptions]=\"gtOptions\"\n                          [gtEvent]=\"gtEvent\"\n                          [gtInfo]=\"gtInfo\"\n                          [gtSettings]=\"gtSettings\"\n                          [data]=\"expandedRow.data ? expandedRow.data:row\"\n                          (redrawEvent)=\"redraw($event)\"\n                          (toggleRowEvent)=\"toggleCollapse($event)\"></gt-expanding-row>\n      </td>\n    </tr>\n    <tr *ngIf=\"gtOptions.reportColumnWidth && last\">\n      <td style=\"padding: 0; border:none;\"\n          *ngFor=\"let column of gtSettings | gtVisible:gtSettings:refreshPipe\" gtColumnWidth\n          [objectKey]=\"column.objectKey\" [widths]=\"columnWidth\"></td>\n    </tr>\n  </ng-template>\n  <tr *ngIf=\"gtInfo.pageTotal === 0 && (gtInfo.searchTerms || gtInfo.filter) && !loading\">\n    <td class=\"gt-no-matching-results\" [attr.colspan]=\"(gtFields | gtVisible:gtSettings).length\">\n      {{gtTexts.noMatchingData}}\n    </td>\n  </tr>\n  <tr *ngIf=\"gtInfo.pageTotal === 0 && !(gtInfo.searchTerms || gtInfo.filter) && !loading\">\n    <td class=\"gt-no-results\" [attr.colspan]=\"(gtFields | gtVisible:gtSettings).length\">{{gtTexts.noData}}\n    </td>\n  </tr>\n  <tr *ngIf=\"gtInfo.pageTotal === 0 && loading\">\n    <td class=\"gt-loading-data\" [attr.colspan]=\"(gtFields | gtVisible:gtSettings).length\">{{gtTexts.loading}}</td>\n  </tr>\n  </tbody>\n</table>\n<table class=\"table\" ngClass=\"{{gtClasses}} {{gtOptions.stack ? 'table-stacked':''}}\"\n       *ngIf=\"gtFields && gtSettings && (gtFields | gtVisible:gtSettings:refreshPipe).length === 0\">\n  <thead>\n  <tr>\n    <th class=\"gt-no-visible-columns\">{{gtTexts.noVisibleColumnsHeading}}</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td class=\"gt-no-visible-columns\">{{gtTexts.noVisibleColumns}}</td>\n  </tr>\n  </tbody>\n</table>\n<table class=\"table\" ngClass=\"{{gtClasses}} {{gtOptions.stack ? 'table-stacked':''}}\"\n       *ngIf=\"!gtFields || !gtSettings\">\n  <thead>\n  <tr>\n    <th class=\"gt-loading-config\">&nbsp;</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td class=\"gt-loading-config\">&nbsp;</td>\n  </tr>\n  </tbody>\n</table>\n"
                    },] },
        ];
        /** @nocollapse */
        GenericTableComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2, },
                { type: GtMetaPipe, },
            ];
        };
        GenericTableComponent.propDecorators = {
            "gtOptions": [{ type: core.Input },],
            "gtTotals": [{ type: core.Input },],
            "gtFields": [{ type: core.Input },],
            "gtSettings": [{ type: core.Input },],
            "gtData": [{ type: core.Input },],
            "gtRowComponent": [{ type: core.Input },],
            "gtTexts": [{ type: core.Input },],
            "gtClasses": [{ type: core.Input },],
            "gtEvent": [{ type: core.Output },],
            "gtInfo": [{ type: core.Input },],
        };
        return GenericTableComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtTableInfoComponent = (function () {
        function GtTableInfoComponent(_changeDetectionRef) {
            this._changeDetectionRef = _changeDetectionRef;
        }
        /**
         * @return {?}
         */
        GtTableInfoComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                this._changeDetectionRef.detectChanges();
            };
        GtTableInfoComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gt-table-info',
                        template: "<span *ngIf=\"genericTable.gtInfo\">{{(customText? customText:genericTable.gtTexts) | gtTableInfo:\n\t\tgenericTable.gtInfo:\n\t\tgenericTable.gtInfo.recordsAfterSearch:\n\t\tgenericTable.gtInfo.recordFrom:\n\t\tgenericTable.gtInfo.recordTo:\n\t\tgenericTable.gtInfo.recordsAll:\n\t\tgenericTable.gtTexts.loading:\n\t\tgenericTable.gtTexts.tableInfoAfterSearch}}</span>"
                    },] },
        ];
        /** @nocollapse */
        GtTableInfoComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef, },
            ];
        };
        GtTableInfoComponent.propDecorators = {
            "genericTable": [{ type: core.Input },],
            "customText": [{ type: core.Input },],
        };
        return GtTableInfoComponent;
    }());
    var TableInfoPipe = (function () {
        function TableInfoPipe() {
        }
        /**
         * @param {?} texts
         * @param {?} keys
         * @param {?} recordsAfterSearch
         * @param {?} recordFrom
         * @param {?} recordTo
         * @param {?} recordsAll
         * @param {?} loading
         * @param {?} tableInfoAfterSearch
         * @return {?}
         */
        TableInfoPipe.prototype.transform = /**
         * @param {?} texts
         * @param {?} keys
         * @param {?} recordsAfterSearch
         * @param {?} recordFrom
         * @param {?} recordTo
         * @param {?} recordsAll
         * @param {?} loading
         * @param {?} tableInfoAfterSearch
         * @return {?}
         */
            function (texts, keys, recordsAfterSearch, recordFrom, recordTo, recordsAll, loading, tableInfoAfterSearch) {
                var /** @type {?} */ text = typeof texts === 'object' ? texts.tableInfo : '';
                if (keys.recordsAfterSearch !== keys.recordsAll) {
                    text = typeof texts === 'object' ? texts.tableInfoAfterSearch : '';
                }
                for (var /** @type {?} */ key in keys) {
                    if (keys.hasOwnProperty(key)) {
                        var /** @type {?} */ searchString = new RegExp('#' + key, 'g');
                        text = text.replace(searchString, keys[key]);
                    }
                }
                return text;
            };
        TableInfoPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtTableInfo'
                    },] },
        ];
        return TableInfoPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtPaginationComponent = (function () {
        function GtPaginationComponent() {
            this.ready = false;
        }
        Object.defineProperty(GtPaginationComponent.prototype, "genericTable", {
            get: /**
             * @return {?}
             */ function () {
                return this._genericTable;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                if (value) {
                    value.gtEvent.subscribe(function (res) {
                        if (res.name === 'gt-info' && res.value.pageTotal > 0) {
                            _this.ready = true;
                        }
                    });
                }
                this._genericTable = value;
            },
            enumerable: true,
            configurable: true
        });
        GtPaginationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gt-pagination',
                        template: "<nav class=\"gt-pagination\" aria-label=\"Table navigation\" *ngIf=\"genericTable && genericTable.gtInfo && ready && genericTable.gtData?.length > 0\" [ngClass]=\"{'no-data':genericTable.gtInfo.pageTotal === 0}\">\n  <ul class=\"pagination\" [ngClass]=\"gtClasses\">\n    <li class=\"page-item\" [ngClass]=\"{'disabled' : genericTable.gtInfo.pageCurrent === 1 || genericTable.loading }\"><a class=\"page-link\" href=\"javascript:void(0);\" (click)=\"genericTable.gtInfo.pageCurrent > 1 && genericTable.previousPage()\" [attr.aria-label]=\"genericTable.gtTexts.paginatePrevious\"><span aria-hidden=\"true\">&laquo;</span><span class=\"sr-only\">{{genericTable.gtTexts.paginatePrevious}}</span></a></li>\n    <li class=\"page-item\" [ngClass]=\"{'disabled' : genericTable.loading && genericTable.gtInfo.pageCurrent !== page, 'active' : genericTable.gtInfo.pageCurrent === page }\" *ngFor=\"let page of genericTable.gtInfo.pageTotal | gtPaginationPipe:genericTable.gtInfo.pageCurrent\"><a class=\"page-link\" [tabindex]=\"page === true ? -1:0\" href=\"javascript:void(0);\" (click)=\"page === true ? '':genericTable.goToPage(page)\">{{page === true ? '&hellip;':page}}</a></li>\n    <li class=\"page-item\" [ngClass]=\"{'disabled' : genericTable.gtInfo.pageCurrent === genericTable.gtInfo.pageTotal || genericTable.loading }\"><a class=\"page-link gt-link\" href=\"javascript:void(0);\" (click)=\"genericTable.gtInfo.pageCurrent !== genericTable.gtInfo.pageTotal && genericTable.nextPage()\" [attr.aria-label]=\"genericTable.gtTexts.paginateNext\"><span aria-hidden=\"true\">&raquo;</span><span class=\"sr-only\">{{genericTable.gtTexts.paginateNext}}</span></a></li>\n  </ul>\n  </nav>\n    ",
                        styles: ['.gt-link {cursor: pointer;}']
                    },] },
        ];
        /** @nocollapse */
        GtPaginationComponent.propDecorators = {
            "genericTable": [{ type: core.Input },],
            "gtClasses": [{ type: core.Input },],
        };
        return GtPaginationComponent;
    }());
    var PaginationPipe = (function () {
        function PaginationPipe() {
        }
        /**
         * @param {?} totalPages
         * @param {?} currentPage
         * @return {?}
         */
        PaginationPipe.prototype.transform = /**
         * @param {?} totalPages
         * @param {?} currentPage
         * @return {?}
         */
            function (totalPages, currentPage) {
                if (totalPages === 0) {
                    return [1];
                }
                var /** @type {?} */ pagination = []; // create new empty array for pagination
                var /** @type {?} */ siblings = 2; // sibling elements ie. number of elements on each side of current page
                var /** @type {?} */ paginationLength = totalPages < siblings * 2 + 1 ? totalPages : siblings * 2 + 1; // number of elements in pagination array
                var /** @type {?} */ start = currentPage <= siblings ? 1 : currentPage - siblings; // starting position for array
                var /** @type {?} */ modifier = totalPages - (currentPage + siblings) <= 0
                    ? totalPages - (currentPage + siblings)
                    : 0; // modifier for pagination values
                var /** @type {?} */ modifiedPosition = start + modifier <= 0 ? 1 : start + modifier;
                // push pages to pagination array
                for (var /** @type {?} */ i = 0; i < paginationLength; i++) {
                    pagination.push(modifiedPosition + i);
                }
                // if first page is not included in pagination...
                if (pagination.indexOf(1) === -1) {
                    // ...check if second page is in pagination...
                    if (pagination.indexOf(2) === -1) {
                        // ...if not check if total number of pages equals seven and number of siblings are two...
                        if (totalPages === 7 && siblings === 2) {
                            // ...add second page and don't convert page number to ellipsis
                            pagination.unshift(2);
                        }
                        else {
                            // ...if not, use this placeholder for ellipsis instead of actual page number
                            pagination[0] = true;
                        }
                    }
                    // ...add first page as first array item
                    pagination.unshift(1);
                }
                else if (totalPages > paginationLength) {
                    // if first page is included add extra page to keep number of items consistent
                    pagination.splice(paginationLength, 0, paginationLength + 1);
                }
                // check if last page is included in pagination...
                if (pagination.indexOf(totalPages) === -1) {
                    // ...if not, page next to last should either show ellipsis or actual page number for the page
                    pagination[pagination.length - 1] =
                        pagination[pagination.length - 1] === totalPages - 1
                            ? totalPages - 1
                            : true;
                    // ...add last page to pagination
                    pagination.push(totalPages);
                }
                return pagination;
            };
        PaginationPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtPaginationPipe'
                    },] },
        ];
        return PaginationPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtDrilldownComponent = (function (_super) {
        __extends(GtDrilldownComponent, _super);
        function GtDrilldownComponent() {
            return _super.call(this) || this;
        }
        /**
         * @return {?}
         */
        GtDrilldownComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        GtDrilldownComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gt-drilldown',
                        template: "\n      <table class=\"table\">\n          <tr *ngFor=\"let row of data\" (click)=\"$rowClick(row, $event)\">\n              <!--<td *ngFor=\"let column of gtSettings\" [style.width]=\"columnWidth[column.objectKey]\">{{column.objectKey}}</td>-->\n              <td *ngFor=\"let column of row | gtRender:gtSettings:gtFields:null:null:gtOptions.highlightSearch:gtInfo.searchTerms;\"\n                  ngClass=\"{{column.objectKey +'-column' | dashCase}} {{gtFields | gtProperty:column.objectKey:'classNames'}} {{(gtFields | gtProperty:column.objectKey:'inlineEdit') ? 'gt-inline-edit':''}} {{column.edited ? 'gt-edited':''}} {{ gtFields | gtColumnClass:row:column }}\" [style.width]=\"columnWidth[column.objectKey]\" [style.max-width]=\"columnWidth[column.objectKey]\">\n                        <span class=\"gt-row-label\"\n                              *ngIf=\"gtOptions.stack\">{{(gtFields | gtProperty:column.objectKey:'stackedHeading') ? (gtFields | gtProperty:column.objectKey:'stackedHeading') : (gtFields | gtProperty:column.objectKey:'name')}}</span>\n                  <gt-custom-component-factory *ngIf=\"column.columnComponent\" class=\"gt-row-content\"\n                                               [type]=\"column.columnComponent.type\"\n                                               [injector]=\"column.columnComponent.injector\" [row]=\"row\"\n                                               [column]=\"column\" (redrawEvent)=\"$redraw($event)\"\n                                               (click)=\"column.click ? column.click(row,column,$event):'';\"></gt-custom-component-factory>\n                  <span *ngIf=\"!column.columnComponent\"\n                        class=\"gt-row-content\" [innerHTML]=\"column.renderValue\"\n                        (click)=\"column.click ? column.click(row,column,$event):''\"></span>\n              </td>\n\n          </tr>\n      </table>\n  ",
                        styles: []
                    },] },
        ];
        /** @nocollapse */
        GtDrilldownComponent.ctorParameters = function () { return []; };
        return GtDrilldownComponent;
    }(GtExpandedRow));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtHighlightPipe = (function () {
        function GtHighlightPipe(sanitizer) {
            this.sanitizer = sanitizer;
        }
        /**
         * @param {?} text
         * @param {?} searchTerm
         * @return {?}
         */
        GtHighlightPipe.prototype.transform = /**
         * @param {?} text
         * @param {?} searchTerm
         * @return {?}
         */
            function (text, searchTerm) {
                var /** @type {?} */ haystackAlwaysString = text + '';
                var /** @type {?} */ highlightedText = haystackAlwaysString; // fallback
                var /** @type {?} */ searchPattern;
                try {
                    searchPattern = new RegExp('(' +
                        searchTerm
                            .toLowerCase()
                            .match(/".*?"|[^ ]+/g) // extract words
                            .map(function (needle) { return needle.replace(/"(.*?)"/, '$1'); } // strip away '"'
                        // strip away '"'
                        )
                            .join('|') + // combine words
                        ')', 'ig');
                }
                catch (error) {
                    return this.sanitizer.bypassSecurityTrustHtml(highlightedText);
                }
                var /** @type {?} */ containsTagPattern = /(<.*?>)(.*)(<\/.*?>)/gi;
                var /** @type {?} */ containsTagMatches = containsTagPattern.exec(haystackAlwaysString);
                if (containsTagMatches) {
                    // tag exists in haystack
                    highlightedText =
                        containsTagMatches[1] +
                            containsTagMatches[2].replace(searchPattern, '<span class="gt-highlight-search">$1</span>') +
                            containsTagMatches[3];
                }
                else {
                    highlightedText = haystackAlwaysString.replace(searchPattern, '<span class="gt-highlight-search">$1</span>');
                }
                return this.sanitizer.bypassSecurityTrustHtml(highlightedText);
            };
        GtHighlightPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtHighlight'
                    },] },
        ];
        /** @nocollapse */
        GtHighlightPipe.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer, },
            ];
        };
        return GtHighlightPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    /**
     * @template R
     */
    var GtRenderPipe = (function () {
        function GtRenderPipe(sanitizer, gtHighlightPipe) {
            this.sanitizer = sanitizer;
            this.gtHighlightPipe = gtHighlightPipe;
            /**
             * Sort by column order
             */
            this.getColumnOrder = function (a, b) {
                if (a.columnOrder < b.columnOrder) {
                    return -1;
                }
                if (a.columnOrder > b.columnOrder || typeof a.columnOrder === 'undefined') {
                    return 1;
                }
                return 0;
            };
            /**
             * Sort by length
             */
            this.getOrderByLength = function (a, b) {
                return b.length - a.length;
            };
            /**
             * Return property
             */
            this.getProperty = function (array, key) {
                for (var /** @type {?} */ i = 0; i < array.length; i++) {
                    if (array[i].objectKey === key) {
                        return array[i];
                    }
                }
            };
        }
        /**
         * @param {?} row
         * @param {?} settings
         * @param {?} fields
         * @param {?} updated
         * @param {?} loading
         * @param {?=} highlight
         * @param {?=} searchString
         * @return {?}
         */
        GtRenderPipe.prototype.transform = /**
         * @param {?} row
         * @param {?} settings
         * @param {?} fields
         * @param {?} updated
         * @param {?} loading
         * @param {?=} highlight
         * @param {?=} searchString
         * @return {?}
         */
            function (row, settings, fields, updated, loading, highlight, searchString) {
                if (highlight === void 0) {
                    highlight = false;
                }
                // let arr = [{"temp":123,"name":"happy"},{"temp":456,"name":"dfgdfg"},{"temp":789,"name":"asdasd"}];
                // console.log(arr,arr.map(function(item){return item.temp}));
                // console.log(settings.map('objectKey'));
                // console.log('render');
                var /** @type {?} */ columns = [];
                for (var /** @type {?} */ i = 0; i < settings.length; i++) {
                    if (settings[i].visible !== false && settings[i].enabled !== false) {
                        columns.push(settings[i].objectKey);
                    }
                }
                for (var /** @type {?} */ i = 0; i < fields.length; i++) {
                    // console.log(!row[fields[i].objectKey]);
                    if (fields[i].value &&
                        typeof fields[i].value === 'function' &&
                        !row.hasOwnProperty(fields[i].objectKey)) {
                        row[fields[i].objectKey] = loading ? '' : fields[i].value(row);
                    }
                }
                // console.log(row);
                var /** @type {?} */ keys = [];
                for (var /** @type {?} */ key in row) {
                    // console.log(key);
                    if (columns.indexOf(key) !== -1) {
                        var /** @type {?} */ fieldSetting = void 0;
                        for (var /** @type {?} */ i = 0; i < fields.length; i++) {
                            if (fields[i].objectKey === key) {
                                fieldSetting = fields[i];
                                // console.log(fieldSetting);
                            }
                        }
                        var /** @type {?} */ columnObject = {
                            objectKey: key,
                            sortValue: row[key]
                        };
                        // add component if defined
                        if (fieldSetting.columnComponent) {
                            columnObject.columnComponent = fieldSetting.columnComponent;
                        }
                        if (loading) {
                            columnObject.renderValue = row[key] !== null ? row[key] : '';
                        }
                        else if (highlight &&
                            searchString &&
                            this.getProperty(settings, key).search !== false) {
                            columnObject.renderValue =
                                fieldSetting.render && typeof fieldSetting.render === 'function'
                                    ? this.gtHighlightPipe.transform(fieldSetting.render(row), searchString)
                                    : this.gtHighlightPipe.transform(row[key] !== null ? row[key] : '', searchString);
                        }
                        else {
                            columnObject.renderValue =
                                fieldSetting.render && typeof fieldSetting.render === 'function'
                                    ? this.sanitizer.bypassSecurityTrustHtml(fieldSetting.render(row))
                                    : row[key] !== null
                                        ? row[key]
                                        : '';
                        }
                        if (fieldSetting.click && typeof fieldSetting.click === 'function') {
                            columnObject.click = fieldSetting.click;
                        }
                        if (fieldSetting.expand) {
                            columnObject.expand = fieldSetting.expand;
                        }
                        keys.push(columnObject);
                    }
                }
                keys.sort(function (a, b) {
                    return columns.indexOf(a.objectKey) < columns.indexOf(b.objectKey)
                        ? -1
                        : 1;
                });
                return keys;
            };
        GtRenderPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtRender'
                    },] },
        ];
        /** @nocollapse */
        GtRenderPipe.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer, },
                { type: GtHighlightPipe, },
            ];
        };
        return GtRenderPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    /**
     * @template R
     */
    var GtVisiblePipe = (function () {
        function GtVisiblePipe() {
            /**
             * Sort by column order
             */
            this.getColumnOrder = function (a, b) {
                if (a.columnOrder < b.columnOrder) {
                    return -1;
                }
                if (a.columnOrder > b.columnOrder || typeof a.columnOrder === 'undefined') {
                    return 1;
                }
                return 0;
            };
        }
        /**
         * @param {?} array
         * @param {?} settings
         * @param {?=} refreshPipe
         * @return {?}
         */
        GtVisiblePipe.prototype.transform = /**
         * @param {?} array
         * @param {?} settings
         * @param {?=} refreshPipe
         * @return {?}
         */
            function (array, settings, refreshPipe) {
                var /** @type {?} */ visibleColumns = settings
                    .sort(this.getColumnOrder)
                    .map(function (setting) {
                    if (setting.visible !== false && setting.enabled !== false) {
                        return setting.objectKey;
                    }
                });
                return array
                    .filter(function (column) {
                    return visibleColumns.indexOf(column.objectKey) !== -1;
                })
                    .sort(function (a, b) {
                    return visibleColumns.indexOf(a.objectKey) <
                        visibleColumns.indexOf(b.objectKey)
                        ? -1
                        : 1;
                });
            };
        GtVisiblePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtVisible'
                    },] },
        ];
        return GtVisiblePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DashCasePipe = (function () {
        function DashCasePipe() {
        }
        /**
         * @param {?} string
         * @return {?}
         */
        DashCasePipe.prototype.transform = /**
         * @param {?} string
         * @return {?}
         */
            function (string) {
                return string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
            };
        DashCasePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'dashCase'
                    },] },
        ];
        return DashCasePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    /**
     * @template R
     */
    var GtPropertyPipe = (function () {
        function GtPropertyPipe() {
        }
        /**
         * @param {?} config
         * @param {?} objectKey
         * @param {?} property
         * @param {?=} refresh
         * @return {?}
         */
        GtPropertyPipe.prototype.transform = /**
         * @param {?} config
         * @param {?} objectKey
         * @param {?} property
         * @param {?=} refresh
         * @return {?}
         */
            function (config, objectKey, property, refresh) {
                var /** @type {?} */ output = null;
                try {
                    for (var /** @type {?} */ i = 0; i < config.length; i++) {
                        if (config[i].objectKey === objectKey) {
                            output = config[i][property];
                        }
                    }
                }
                catch (error) {
                    console.log('cannot read property: "' +
                        property +
                        '" on missing key: "' +
                        objectKey +
                        '" in config.', error);
                }
                return output;
            };
        GtPropertyPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtProperty'
                    },] },
        ];
        return GtPropertyPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtChunkPipe = (function () {
        function GtChunkPipe() {
        }
        /**
         * @param {?} array
         * @param {?} gtInfo
         * @param {?} chunkSize
         * @param {?} page
         * @param {?} refreshPageArray
         * @param {?} refreshData
         * @param {?} gtEvent
         * @param {?} data
         * @return {?}
         */
        GtChunkPipe.prototype.transform = /**
         * @param {?} array
         * @param {?} gtInfo
         * @param {?} chunkSize
         * @param {?} page
         * @param {?} refreshPageArray
         * @param {?} refreshData
         * @param {?} gtEvent
         * @param {?} data
         * @return {?}
         */
            function (array, gtInfo, chunkSize, page, refreshPageArray, refreshData, gtEvent, data) {
                if (!Array.isArray(array)) {
                    return array;
                }
                data.exportData = array; // store data for export
                var /** @type {?} */ PAGES = [];
                var /** @type {?} */ ENTRIES = array.length;
                for (var /** @type {?} */ i = 0; i < ENTRIES; i += chunkSize) {
                    PAGES.push(array.slice(i, i + chunkSize));
                }
                gtInfo.visibleRecords = !PAGES[page - 1] ? [] : __spread(PAGES[page - 1]); // add visible rows
                gtInfo.pageTotal = PAGES.length; // add number of pages
                setTimeout(function () {
                    return gtEvent.emit({
                        name: 'gt-info',
                        value: gtInfo
                    });
                }, 0);
                return PAGES[page - 1];
            };
        GtChunkPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtChunk'
                    },] },
        ];
        return GtChunkPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtFilterPipe = (function () {
        function GtFilterPipe() {
        }
        // @Output() filterInfo = new EventEmitter();
        /**
         * @param {?} allRows
         * @param {?} filterBy
         * @param {?} gtInfo
         * @param {?} refreshFilter
         * @param {?} refreshData
         * @return {?}
         */
        GtFilterPipe.prototype.transform = /**
         * @param {?} allRows
         * @param {?} filterBy
         * @param {?} gtInfo
         * @param {?} refreshFilter
         * @param {?} refreshData
         * @return {?}
         */
            function (allRows, filterBy, gtInfo, refreshFilter, refreshData) {
                // console.log(allRows,filterBy);
                gtInfo.recordsAll = allRows.length;
                if (!Array.isArray(allRows) || !filterBy) {
                    // gtInfo.filtered = false;
                    var /** @type {?} */ length_1 = allRows === null ? 0 : allRows.length;
                    gtInfo.recordsAfterFilter = length_1;
                    return allRows;
                }
                var /** @type {?} */ output = [];
                for (var /** @type {?} */ i = 0; i < allRows.length; i++) {
                    var /** @type {?} */ rowObject = allRows[i];
                    var /** @type {?} */ match = true;
                    for (var /** @type {?} */ property in filterBy) {
                        if (filterBy.hasOwnProperty(property)) {
                            // console.log(property);
                            // console.log(filter[property].indexOf(obj[property]));
                            if (filterBy[property].indexOf(rowObject[property]) === -1) {
                                match = false;
                            }
                        }
                    }
                    if (match) {
                        output.push(rowObject);
                    }
                }
                gtInfo.recordsAfterFilter = output.length; // .emit(output.length);
                return output;
            };
        GtFilterPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtFilter'
                    },] },
        ];
        return GtFilterPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    /**
     * @template R
     */
    var GtOrderByPipe = (function () {
        function GtOrderByPipe() {
            /**
             * Return property
             */
            this.getProperty = function (array, key) {
                for (var /** @type {?} */ i = 0; i < array.length; i++) {
                    if (array[i].objectKey === key) {
                        return array[i];
                    }
                }
            };
        }
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        GtOrderByPipe._orderByComparator = /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
            function (a, b) {
                // sort boolean values as strings
                if (typeof a === 'boolean') {
                    a = a.toString();
                }
                if (typeof b === 'boolean') {
                    b = b.toString();
                }
                if (isNaN(parseFloat(a)) ||
                    !isFinite(a) ||
                    (isNaN(parseFloat(b)) || !isFinite(b))) {
                    if (b === null ||
                        (typeof b === 'undefined' && (a !== null && typeof a !== 'undefined'))) {
                        return 1;
                    }
                    if (a === null ||
                        (typeof a === 'undefined' && (b !== null && typeof b !== 'undefined'))) {
                        return -1;
                    }
                    // isn't a number so lowercase the string to properly compare
                    try {
                        if (a.toLowerCase() < b.toLowerCase()) {
                            return -1;
                        }
                        if (a.toLowerCase() > b.toLowerCase()) {
                            return 1;
                        }
                    }
                    catch (error) {
                        return 0;
                    }
                }
                else {
                    // parse strings as numbers to compare properly
                    if (parseFloat(a) < parseFloat(b)) {
                        return -1;
                    }
                    if (parseFloat(a) > parseFloat(b)) {
                        return 1;
                    }
                }
                return 0; // equal each other
            };
        /**
         * Return sort function
         * @param {?} field
         * @return {?}
         */
        GtOrderByPipe.prototype.getSortFunction = /**
         * Return sort function
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if (!field) {
                    // console.log('error trying to sort undefined field');
                    return false;
                }
                if (typeof field.sort === 'function') {
                    return field.sort;
                }
                else if (typeof field.value === 'function') {
                    return field.value;
                }
                else {
                    return false;
                }
            };
        /**
         * @param {?} input
         * @param {?} sortByProperties
         * @param {?} fields
         * @param {?} refreshSorting
         * @param {?} refreshData
         * @return {?}
         */
        GtOrderByPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} sortByProperties
         * @param {?} fields
         * @param {?} refreshSorting
         * @param {?} refreshData
         * @return {?}
         */
            function (input, sortByProperties, fields, refreshSorting, refreshData) {
                var _this = this;
                if (!Array.isArray(input) || input === null) {
                    return input;
                }
                if (!Array.isArray(sortByProperties) ||
                    (Array.isArray(sortByProperties) && sortByProperties.length === 1)) {
                    var /** @type {?} */ propertyToCheck = sortByProperties[0];
                    var /** @type {?} */ desc_1 = propertyToCheck.substr(0, 1) === '-';
                    // basic array
                    if (!propertyToCheck ||
                        propertyToCheck === '-' ||
                        propertyToCheck === '+') {
                        return !desc_1 ? input.sort() : input.sort().reverse();
                    }
                    else {
                        var /** @type {?} */ property_1 = propertyToCheck.substr(0, 1) === '+' ||
                            propertyToCheck.substr(0, 1) === '-'
                            ? propertyToCheck.substr(1)
                            : propertyToCheck;
                        // check if custom sort function is defined
                        var /** @type {?} */ sortFunction_1 = this.getSortFunction(this.getProperty(fields, property_1));
                        // console.log(property);
                        return input.sort(function (a, b) {
                            // use custom sort function if one is defined
                            var /** @type {?} */ propertyA = sortFunction_1 === false
                                ? property_1 === '$$gtRowId'
                                    ? +a.$$gtRowId.split('_')[0]
                                    : a[property_1]
                                : sortFunction_1(a);
                            var /** @type {?} */ propertyB = sortFunction_1 === false
                                ? property_1 === '$$gtRowId'
                                    ? +b.$$gtRowId.split('_')[0]
                                    : b[property_1]
                                : sortFunction_1(b);
                            // if both values are undefined...
                            if (typeof propertyA === 'undefined' &&
                                typeof propertyB === 'undefined') {
                                // ...skip comparison
                                return;
                            }
                            return !desc_1
                                ? GtOrderByPipe._orderByComparator(propertyA, propertyB)
                                : -GtOrderByPipe._orderByComparator(propertyA, propertyB);
                        });
                    }
                }
                else {
                    // loop over property of the array in order and sort
                    return input.sort(function (a, b) {
                        // console.log('multiple');
                        for (var /** @type {?} */ i = 0; i < sortByProperties.length; i++) {
                            var /** @type {?} */ desc = sortByProperties[i].substr(0, 1) === '-';
                            var /** @type {?} */ property = sortByProperties[i].substr(0, 1) === '+' ||
                                sortByProperties[i].substr(0, 1) === '-'
                                ? sortByProperties[i].substr(1)
                                : sortByProperties[i];
                            // console.log(property);
                            // check if custom sort function is defined
                            var /** @type {?} */ sortFunction = _this.getSortFunction(_this.getProperty(fields, property));
                            // use custom sort function if one is defined
                            var /** @type {?} */ propertyA = sortFunction === false
                                ? property === '$$gtRowId'
                                    ? +a.$$gtRowId.split('_')[0]
                                    : a[property]
                                : sortFunction(a);
                            var /** @type {?} */ propertyB = sortFunction === false
                                ? property === '$$gtRowId'
                                    ? +b.$$gtRowId.split('_')[0]
                                    : b[property]
                                : sortFunction(b);
                            var /** @type {?} */ comparison = !desc
                                ? GtOrderByPipe._orderByComparator(propertyA, propertyB)
                                : -GtOrderByPipe._orderByComparator(propertyA, propertyB);
                            // don't return 0 yet in case of needing to sort by next property
                            if (comparison !== 0) {
                                return comparison;
                            }
                        }
                        return 0; // equal each other
                    });
                }
            };
        GtOrderByPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtOrderBy'
                    },] },
        ];
        return GtOrderByPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    /**
     * @template R
     */
    var GtSearchPipe = (function () {
        function GtSearchPipe() {
            /**
             * Return property
             */
            this.getProperty = function (array, key) {
                for (var /** @type {?} */ i = 0; i < array.length; i++) {
                    if (array[i].objectKey === key) {
                        return array[i];
                    }
                }
            };
        }
        /**
         * @param {?} allRows
         * @param {?} searchTerms
         * @param {?} gtInfo
         * @param {?} settings
         * @param {?} fields
         * @param {?} refreshData
         * @return {?}
         */
        GtSearchPipe.prototype.transform = /**
         * @param {?} allRows
         * @param {?} searchTerms
         * @param {?} gtInfo
         * @param {?} settings
         * @param {?} fields
         * @param {?} refreshData
         * @return {?}
         */
            function (allRows, searchTerms, gtInfo, settings, fields, refreshData) {
                //  if no search terms are defined...
                if (!searchTerms || searchTerms.replace(/"/g, '').length === 0) {
                    // ...return all rows
                    var /** @type {?} */ length_1 = allRows === null ? 0 : allRows.length;
                    gtInfo.recordsAfterSearch = length_1;
                    return allRows;
                }
                var /** @type {?} */ searchFunction = {};
                var /** @type {?} */ fieldsTemp = [];
                for (var /** @type {?} */ k = 0; k < fields.length; k++) {
                    var /** @type {?} */ field = fields[k];
                    // check if field should be included in global search
                    var /** @type {?} */ include = this.getProperty(settings, field.objectKey).search === false
                        ? false
                        : true;
                    // if include...
                    if (include) {
                        // ...and if search function is defined...
                        if (typeof field.search === 'function') {
                            // ...add it as search function for field
                            searchFunction[field.objectKey] = field.search;
                        }
                        else if (typeof field.value === 'function') {
                            // ...add it as search function for field
                            searchFunction[field.objectKey] = field.value;
                        }
                        // ...push it to our fields array
                        fieldsTemp.push(field);
                    }
                }
                var /** @type {?} */ filteredRows = [];
                searchTerms = typeof searchTerms === 'undefined' ? '' : searchTerms;
                var /** @type {?} */ searchTermsArray = searchTerms.toLowerCase().match(/(".*"|[^\s]+)/g);
                for (var /** @type {?} */ i = 0; i < allRows.length; i++) {
                    var /** @type {?} */ row = allRows[i];
                    var /** @type {?} */ string = '';
                    for (var /** @type {?} */ j = 0; j < fieldsTemp.length; j++) {
                        var /** @type {?} */ separator = j === 0 ? '' : ' & ';
                        string += searchFunction[fieldsTemp[j].objectKey]
                            ? separator + searchFunction[fieldsTemp[j].objectKey](row, j)
                            : separator + row[fieldsTemp[j].objectKey];
                    }
                    string = string.toLowerCase();
                    var /** @type {?} */ match = true;
                    for (var /** @type {?} */ k = 0; k < searchTermsArray.length; k++) {
                        var /** @type {?} */ term = searchTermsArray[k].replace(/"/g, '');
                        match = string.indexOf(term) !== -1;
                        if (!match) {
                            break;
                        }
                    }
                    if (match) {
                        filteredRows.push(row);
                    }
                }
                gtInfo.recordsAfterSearch = filteredRows.length;
                // gtInfo.refresh(filteredRows.length,gt);
                return filteredRows;
            };
        GtSearchPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtSearch'
                    },] },
        ];
        return GtSearchPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template C
     */
    var ComponentAnchorDirective = (function () {
        function ComponentAnchorDirective(componentFactoryResolver, viewContainer) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.viewContainer = viewContainer;
            this.instance = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ComponentAnchorDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ factory = this.componentFactoryResolver.resolveComponentFactory(this.ctor);
                var /** @type {?} */ component = this.viewContainer.createComponent(factory, 0, this.injector);
                this.instance.emit(component.instance);
            };
        ComponentAnchorDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[gtComponentAnchor]'
                    },] },
        ];
        /** @nocollapse */
        ComponentAnchorDirective.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver, },
                { type: core.ViewContainerRef, },
            ];
        };
        ComponentAnchorDirective.propDecorators = {
            "ctor": [{ type: core.Input },],
            "injector": [{ type: core.Input },],
            "instance": [{ type: core.Output },],
        };
        return ComponentAnchorDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     * @template R
     */
    var /**
     * @abstract
     * @template R
     */ GtCustomComponent = (function () {
        function GtCustomComponent() {
            this.redrawEvent = new core.EventEmitter();
            this.$searchTerms = new ReplaySubject.ReplaySubject(1);
        }
        /**
         * @param {?=} $event
         * @return {?}
         */
        GtCustomComponent.prototype.$redraw = /**
         * @param {?=} $event
         * @return {?}
         */
            function ($event) {
                this.redrawEvent.emit({ row: this.row, column: this.column });
            };
        /**
         * @return {?}
         */
        GtCustomComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.$searchTerms.subscribe(function (terms) { return (_this.searchTerms = terms); });
            };
        return GtCustomComponent;
    }());
    // unsupported: template constraints.
    /**
     * @template R, C
     */
    var GtCustomComponentFactory = (function () {
        function GtCustomComponentFactory() {
            this.$searchTerms = new ReplaySubject.ReplaySubject(1);
            this.redrawEvent = new core.EventEmitter();
        }
        Object.defineProperty(GtCustomComponentFactory.prototype, "searchTerms", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.$searchTerms.next(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} instance
         * @return {?}
         */
        GtCustomComponentFactory.prototype.instance = /**
         * @param {?} instance
         * @return {?}
         */
            function (instance) {
                instance.row = this.row;
                instance.column = this.column;
                instance.$searchTerms = this.$searchTerms;
                instance.redrawEvent.subscribe(this.redrawEvent);
            };
        GtCustomComponentFactory.decorators = [
            { type: core.Component, args: [{
                        selector: 'gt-custom-component-factory',
                        template: "<div gtComponentAnchor [ctor]=\"type\"\n                    [injector]=\"injector\"\n                    (instance)=\"instance($event)\"></div>"
                    },] },
        ];
        /** @nocollapse */
        GtCustomComponentFactory.propDecorators = {
            "searchTerms": [{ type: core.Input },],
            "type": [{ type: core.Input },],
            "injector": [{ type: core.Input },],
            "row": [{ type: core.Input },],
            "column": [{ type: core.Input },],
            "redrawEvent": [{ type: core.Output },],
        };
        return GtCustomComponentFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtDropdownComponent = (function () {
        function GtDropdownComponent(renderer) {
            this.renderer = renderer;
            this.selectedChange = new core.EventEmitter();
            this.active = false;
            this.state = new Subject.Subject();
        }
        Object.defineProperty(GtDropdownComponent.prototype, "selected", {
            get: /**
             * @return {?}
             */ function () {
                return this._selected;
            },
            set: /**
             * @param {?} selection
             * @return {?}
             */ function (selection) {
                this._selected = selection;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} option
         * @return {?}
         */
        GtDropdownComponent.prototype.select = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                this.active = false;
                this.state.next(this.active);
                if (this._selected !== option) {
                    this.selectedChange.emit(option);
                }
            };
        /**
         * @return {?}
         */
        GtDropdownComponent.prototype.toggleDropdown = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.active = !this.active;
                setTimeout(function () {
                    _this.state.next(_this.active);
                }, 0);
            };
        /**
         * @return {?}
         */
        GtDropdownComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.state.subscribe(function (state) {
                    if (state) {
                        _this.tether = new Tether({
                            element: '#' + _this.id + '_menu',
                            target: '#' + _this.id,
                            attachment: 'top left',
                            targetAttachment: 'bottom left',
                            constraints: [
                                {
                                    to: 'window',
                                    attachment: 'together'
                                }
                            ]
                        });
                        _this.tether.position();
                        // set up click listener and listen for click outside dropdown
                        // set up click listener and listen for click outside dropdown
                        _this.clickListener = _this.renderer.listen('document', 'click', function (event) {
                            _this.active = false;
                            _this.state.next(_this.active);
                        });
                        // set up keyboard listener and listen for escape key up
                        // set up keyboard listener and listen for escape key up
                        _this.keyupListener = _this.renderer.listen('document', 'keyup', function (event) {
                            switch (event.key) {
                                case 'Escape':
                                    _this.active = false;
                                    _this.state.next(_this.active);
                                    break;
                            }
                        });
                    }
                    else {
                        _this.tether.destroy();
                        _this.removeListeners();
                    }
                });
            };
        /**
         * @return {?}
         */
        GtDropdownComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeListeners();
            };
        /**
         * @return {?}
         */
        GtDropdownComponent.prototype.removeListeners = /**
         * @return {?}
         */
            function () {
                if (this.clickListener) {
                    this.clickListener();
                }
                if (this.keyupListener) {
                    this.keyupListener();
                }
            };
        GtDropdownComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gt-dropdown',
                        template: "\n    <div class=\"dropdown gt-dropdown\" [ngClass]=\"{'show':active}\" [attr.id]=\"id\">\n      <div class=\"dropdown-toggle\" (click)=\"toggleDropdown()\" [attr.aria-expanded]=\"active\">{{selected}}</div>\n      <div class=\"gt-dropdown-menu dropdown-menu\" *ngIf=\"active\" [ngClass]=\"{'show':active}\" [attr.id]=\"id+'_menu'\">\n        <button *ngFor=\"let option of options;\" class=\"dropdown-item\" (click)=\"select(option)\" [ngClass]=\"{'active':option === selected}\">{{option}}</button>\n      </div>\n    </div>\n  ",
                        styles: [
                            "\n    .gt-dropdown .dropdown-toggle {\n      cursor: pointer;\n    }\n    .gt-dropdown .dropdown-toggle::after {\n      transition: opacity 0.4s ease-in-out;\n      opacity: 0;\n    }\n    .gt-dropdown .dropdown-toggle:hover::after {\n      opacity: 1;\n    }\n  "
                        ]
                    },] },
        ];
        /** @nocollapse */
        GtDropdownComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2, },
            ];
        };
        GtDropdownComponent.propDecorators = {
            "selected": [{ type: core.Input },],
            "options": [{ type: core.Input },],
            "id": [{ type: core.Input },],
            "selectedChange": [{ type: core.Output },],
        };
        return GtDropdownComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtTotalsPipe = (function () {
        function GtTotalsPipe() {
        }
        /**
         * @param {?} value
         * @param {?} data
         * @param {?} objectKey
         * @param {?} refresh
         * @return {?}
         */
        GtTotalsPipe.prototype.transform = /**
         * @param {?} value
         * @param {?} data
         * @param {?} objectKey
         * @param {?} refresh
         * @return {?}
         */
            function (value, data, objectKey, refresh) {
                var /** @type {?} */ output;
                if (data.length === 0) {
                    return;
                }
                if (typeof value === 'function') {
                    output = value(data, objectKey);
                }
                else if (value) {
                    output = value;
                }
                else {
                    output = '';
                }
                return output;
            };
        GtTotalsPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtTotals'
                    },] },
        ];
        return GtTotalsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtTotalsPositionPipe = (function () {
        function GtTotalsPositionPipe() {
        }
        /**
         * @param {?} array
         * @param {?=} position
         * @return {?}
         */
        GtTotalsPositionPipe.prototype.transform = /**
         * @param {?} array
         * @param {?=} position
         * @return {?}
         */
            function (array, position) {
                if (position === void 0) {
                    position = 'header';
                }
                return array.filter(function (total) {
                    // if no position is defined assume position to be header
                    var /** @type {?} */ totalPosition = total.position ? total.position : 'header';
                    return totalPosition === position;
                });
            };
        GtTotalsPositionPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtTotalsPosition'
                    },] },
        ];
        return GtTotalsPositionPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtRowClassPipe = (function () {
        function GtRowClassPipe() {
        }
        /**
         * @param {?} array
         * @param {?} gtFields
         * @return {?}
         */
        GtRowClassPipe.prototype.transform = /**
         * @param {?} array
         * @param {?} gtFields
         * @return {?}
         */
            function (array, gtFields) {
                if (array) {
                    // find columns with rowClass property defined
                    var /** @type {?} */ COLUMNS_WITH_CLASS = gtFields
                        .map(function (column) { return column; })
                        .filter(function (column) { return column.rowClass; });
                    COLUMNS_WITH_CLASS.map(function (column) {
                        // for each column with rowClass property defined...
                        array.map(function (row) {
                            // loop through rows and set row class
                            if (typeof column.rowClass === 'function') {
                                // if row class is a function, try using the function...
                                try {
                                    if (row.$$gtRowClass) {
                                        row.$$gtRowClass = row.$$gtRowClass.concat(' ' + column.rowClass(row, column));
                                    }
                                    else {
                                        row.$$gtRowClass = column.rowClass(row, column);
                                    }
                                }
                                catch (error) {
                                    console.log('Error when trying to get row class name using formula.', error);
                                }
                            }
                            else {
                                // if not a function, return plain string value
                                if (row.$$gtRowClass) {
                                    row.$$gtRowClass = row.$$gtRowClass.concat(' ' + column.rowClass);
                                }
                                else {
                                    row.$$gtRowClass = column.rowClass;
                                }
                            }
                        });
                    });
                }
                return array;
            };
        GtRowClassPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtRowClass'
                    },] },
        ];
        return GtRowClassPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtColumnClassPipe = (function () {
        function GtColumnClassPipe() {
        }
        /**
         * @param {?} gtFields
         * @param {?} column
         * @param {?=} row
         * @return {?}
         */
        GtColumnClassPipe.prototype.transform = /**
         * @param {?} gtFields
         * @param {?} column
         * @param {?=} row
         * @return {?}
         */
            function (gtFields, column, row) {
                // find columns with columnClass property defined
                var /** @type {?} */ COLUMN_WITH_CLASS = gtFields
                    .map(function (field) { return field; })
                    .filter(function (field) { return field.columnClass && field.objectKey === column.objectKey; })[0];
                if (!COLUMN_WITH_CLASS) {
                    return;
                }
                else if (typeof COLUMN_WITH_CLASS.columnClass === 'function') {
                    // if column class is a function, try using the function...
                    try {
                        return COLUMN_WITH_CLASS.columnClass(row, column);
                    }
                    catch (error) {
                        console.log('Error when trying to get column class name using formula.', error);
                    }
                }
                else {
                    // if not a function, return plain string value
                    return COLUMN_WITH_CLASS.columnClass;
                }
            };
        GtColumnClassPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtColumnClass'
                    },] },
        ];
        return GtColumnClassPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtColumnWidthDirective = (function () {
        function GtColumnWidthDirective(hostElement, cdRef) {
            this.hostElement = hostElement;
            this.cdRef = cdRef;
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        GtColumnWidthDirective.prototype.onResize = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.checkSize();
            };
        /**
         * @return {?}
         */
        GtColumnWidthDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.checkSize();
            };
        /**
         * @return {?}
         */
        GtColumnWidthDirective.prototype.checkSize = /**
         * @return {?}
         */
            function () {
                this.widths[this.objectKey] = window
                    .getComputedStyle(this.hostElement.nativeElement, null)
                    .getPropertyValue('width');
                this.cdRef.detectChanges();
            };
        GtColumnWidthDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[gtColumnWidth]'
                    },] },
        ];
        /** @nocollapse */
        GtColumnWidthDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.ChangeDetectorRef, },
            ];
        };
        GtColumnWidthDirective.propDecorators = {
            "objectKey": [{ type: core.Input },],
            "widths": [{ type: core.Input },],
            "onResize": [{ type: core.HostListener, args: ['window:resize', ['$event'],] },],
        };
        return GtColumnWidthDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtCheckboxComponent = (function () {
        function GtCheckboxComponent() {
            this.class = 'd-flex justify-content-end';
            this.changed = new core.EventEmitter();
        }
        Object.defineProperty(GtCheckboxComponent.prototype, "initialValue", {
            get: /**
             * @return {?}
             */ function () {
                return this._initialValue;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._initialValue = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GtCheckboxComponent.prototype, "checked", {
            get: /**
             * @return {?}
             */ function () {
                return this._checked;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._checked = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        GtCheckboxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} checked
         * @return {?}
         */
        GtCheckboxComponent.prototype.toggle = /**
         * @param {?} checked
         * @return {?}
         */
            function (checked) {
                this.changed.emit(this.checked);
            };
        GtCheckboxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'gt-checkbox',
                        template: "\n    <label class=\"custom-control custom-checkbox p-0\" (click)=\"$event.stopPropagation()\">\n      <input #checkbox type=\"checkbox\" class=\"custom-control-input\" [(checked)]=\"checked\" (change)=\"toggle($event);\">\n      <span class=\"custom-control-label\"></span>\n    </label>\n  ",
                        styles: []
                    },] },
        ];
        /** @nocollapse */
        GtCheckboxComponent.ctorParameters = function () { return []; };
        GtCheckboxComponent.propDecorators = {
            "class": [{ type: core.HostBinding, args: ['class',] },],
            "initialValue": [{ type: core.Input },],
            "checked": [{ type: core.Input },],
            "changed": [{ type: core.Output },],
        };
        return GtCheckboxComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtIsObservablePipe = (function () {
        function GtIsObservablePipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        GtIsObservablePipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return input instanceof Observable.Observable;
            };
        GtIsObservablePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtIsObservable'
                    },] },
        ];
        return GtIsObservablePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GtIsEditablePipe = (function () {
        function GtIsEditablePipe() {
        }
        /**
         * @param {?} property
         * @param {?} row
         * @param {?} refreshPipe
         * @return {?}
         */
        GtIsEditablePipe.prototype.transform = /**
         * @param {?} property
         * @param {?} row
         * @param {?} refreshPipe
         * @return {?}
         */
            function (property, row, refreshPipe) {
                if (typeof property === 'function') {
                    return property(row);
                }
                else {
                    return false;
                }
            };
        GtIsEditablePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'gtIsEditable'
                    },] },
        ];
        return GtIsEditablePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GenericTableModule = (function () {
        function GenericTableModule() {
        }
        GenericTableModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ComponentAnchorDirective,
                            GenericTableComponent,
                            GtPaginationComponent,
                            GtVisiblePipe,
                            GtRenderPipe,
                            DashCasePipe,
                            GtPropertyPipe,
                            GtChunkPipe,
                            GtFilterPipe,
                            GtOrderByPipe,
                            GtExpandingRowComponent,
                            GtCustomComponentFactory,
                            GtSearchPipe,
                            PaginationPipe,
                            GtTableInfoComponent,
                            TableInfoPipe,
                            GtMetaPipe,
                            GtTotalsPipe,
                            GtTotalsPositionPipe,
                            GtRowClassPipe,
                            GtColumnClassPipe,
                            GtHighlightPipe,
                            GtIsObservablePipe,
                            GtIsEditablePipe,
                            GtDropdownComponent,
                            GtColumnWidthDirective,
                            GtDrilldownComponent,
                            GtCheckboxComponent
                        ],
                        imports: [common.CommonModule, forms.FormsModule],
                        exports: [
                            GenericTableComponent,
                            GtPaginationComponent,
                            GtTableInfoComponent,
                            GtPropertyPipe,
                            GtHighlightPipe,
                            GtExpandingRowComponent,
                            GtDropdownComponent,
                            GtDrilldownComponent,
                            GtCheckboxComponent
                        ],
                        entryComponents: [GtDrilldownComponent, GtCheckboxComponent],
                        providers: [GtMetaPipe, GtHighlightPipe],
                        bootstrap: []
                    },] },
        ];
        return GenericTableModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.GtExpandingRowComponent = GtExpandingRowComponent;
    exports.GtExpandedRow = GtExpandedRow;
    exports.GenericTableComponent = GenericTableComponent;
    exports.GtTableInfoComponent = GtTableInfoComponent;
    exports.GtPaginationComponent = GtPaginationComponent;
    exports.GtDrilldownComponent = GtDrilldownComponent;
    exports.GenericTableModule = GenericTableModule;
    exports.GtCustomComponent = GtCustomComponent;
    exports.GtHighlightPipe = GtHighlightPipe;
    exports.ɵv = GtCheckboxComponent;
    exports.ɵc = GtCustomComponentFactory;
    exports.ɵt = GtDropdownComponent;
    exports.ɵb = PaginationPipe;
    exports.ɵa = TableInfoPipe;
    exports.ɵe = ComponentAnchorDirective;
    exports.ɵu = GtColumnWidthDirective;
    exports.ɵh = DashCasePipe;
    exports.ɵj = GtChunkPipe;
    exports.ɵq = GtColumnClassPipe;
    exports.ɵk = GtFilterPipe;
    exports.ɵs = GtIsEditablePipe;
    exports.ɵr = GtIsObservablePipe;
    exports.ɵd = GtMetaPipe;
    exports.ɵl = GtOrderByPipe;
    exports.ɵi = GtPropertyPipe;
    exports.ɵg = GtRenderPipe;
    exports.ɵp = GtRowClassPipe;
    exports.ɵm = GtSearchPipe;
    exports.ɵo = GtTotalsPositionPipe;
    exports.ɵn = GtTotalsPipe;
    exports.ɵf = GtVisiblePipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,